{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ReconnectedCC","text":"<p>ReconnectedCC is a ComputerCraft server that also has the sc-goodies and sc-peripherals mods from the SwitchCraft server.</p>"},{"location":"#how-do-you-join","title":"How do you join?","text":"<p>Join by downloading the modpack at https://pack.reconnected.cc/ReconnectedCC.zip, and importing it into Prism Launcher</p> <p>We use packwiz to distribute our modpack, the server IP is embedded in the modpack.</p>"},{"location":"#how-do-i-report-issues-and-bugs","title":"How do I report issues and bugs?","text":"<p>Right now, the easiest way to report issues and bugs is through our Discord server, listed on our website.</p>"},{"location":"rules/","title":"ReconnectedCC Rules","text":""},{"location":"rules/#do-not-grief-or-deface-the-world","title":"Do not grief or deface the world","text":"<ol> <li>Griefing anyone's work, including programs on computers, even if it is unclaimed, is not allowed.</li> <li>Leave chests, computers and other valuables as you found them, unless you know they are naturally generated.</li> <li>Unsightly builds and purging of land near spawn and other cities is not allowed.</li> <li>Staff reserves the right to remove posters anywhere for any reason.</li> </ol>"},{"location":"rules/#do-not-abuse-system-resources-with-malicious-intent","title":"Do not abuse system resources with malicious intent","text":"<ol> <li>Abusing bugs in server software is not allowed.</li> <li>Don't write programs that cause lag with malicious intent.</li> <li>Do not DoS other services from the server.</li> <li>Do not artificially inflate computer or peripheral IDs.</li> <li>Do not store more than 50MB of data (e.g. with computers or floppy disks) per player, service, company or building. Exceptions can be granted at the discretion of staff.</li> <li>\"Cinema\" computers (e.g. video computers running Juroku or Sanjuuni) might be turned off by staff at any time to help with server performance.</li> <li>Attempting to corrupt the world or chunkban yourself or another player by creating invalid items, blocks or network packets is not allowed.<ol> <li>Nesting containers is considered an invalid item and is not allowed.</li> <li>Creating items or blocks with excessive NBT data is not allowed.</li> </ol> </li> <li>Do not chain startup commands to other computers from a computer set up as a startup computer by staff.</li> <li>Do not use a chunkloader, intentionally load an area with an afk player for multiple days at a time, or use any other way to load chunks, even if it is intended by vanilla game design. You should use staff provided, Kromer backed chunkloaders, or request a /forceload by staff in the case of a public service.</li> </ol>"},{"location":"rules/#do-not-exploit-bugs-or-cheat-in-any-way","title":"Do not exploit bugs or cheat in any way","text":"<ol> <li>Exploiting any bug, new or old, is not allowed.</li> <li>X-raying, wallhacking, zoom, player automation and similar hacks with texture packs or mods is not allowed. Plethora Block Scanners are allowed.</li> <li>Using hacked clients or hack mods is not allowed.<ol> <li>Automating player behavior through Baritone isn't allowed, as this accesses information that a regular player can't access without the mod.</li> </ol> </li> <li>Any bug that has the potential if being exploited by other players, should be silently and responsibly disclosed to a member of staff.</li> <li>Do not use a seed structure predictor to predict structures.</li> <li>The use of a mineflayer bot requires permission and code approval by staff</li> </ol>"},{"location":"rules/#do-not-be-a-nuisance-to-other-players","title":"Do not be a nuisance to other players","text":"<ol> <li>Spamming any type of chats with repeated words, repeated messages, pinging users or any other unwanted behaviour that could be considered disruptive to chatting is not allowed.</li> <li>Inviting players to other servers, sharing server links, etc is not allowed, unless explicitly allowed by a member of staff.</li> <li>Insulting other players in any way, especially if repeated is not allowed.</li> <li>Using claims to block other players is not allowed.</li> <li>Squatting claims with no interest of making use of them, including for resale, is not allowed.</li> <li>Use of profanity is okay, but disruptive use of profanity is not allowed.</li> <li>Use of hate speech, racial slurs, threats and any other language that could be considered harmful to a person or a group of people is not allowed.<ol> <li>Discussion of such language, when it is clear that it is not being used for the intent of harm is okay.</li> </ol> </li> <li>Explicit content including: self harm and suicide, erotic content, gore, shock content, etc. is not allowed.<ol> <li>This includes in private messages to a player who did not consent to discussing them, or who no longer wishes to discuss them.</li> <li>Discussing any of the above topics with players who are under the age of 18 is completely disallowed, even in private messages, even if they are contributing to the discussion and even outside of the server. Any disrespect to the age of consent will result in a non-negotiable ban.</li> <li>Whenever anything makes you uncomfortable, please contact a staff member privately.</li> </ol> </li> <li>Stealing items or money from a player, shop, company or service, even if they have trusted you, even via an introspection module, is forbidden. This includes through abusing alt accounts, scamming, impersonation.<ol> <li>Piracy and stealing through exploitation of bugs and other exploits in player software is allowed, as long as player data isn't affected maliciously.</li> </ol> </li> <li>Do not beg for items, services, claims or money from players, companies or services. It is fine to ask a single player about their property once, but this shouldn't be repeated nor should it happen in bulk.</li> <li>Do not write or install software on computers belonging to other players or servers without their informed consent.<ol> <li>When advertising malicious software, it should be made very clear that it is malicious during every interaction.</li> </ol> </li> <li>Do not use No Chat Reports' chat encryption feature in public chat. Using it in private messages is allowed however, as long as the receiving party is able to decode it.</li> <li>Any form of in game gambling must be fair to the players.<ol> <li>Gambling must never involve money that has value in the real world (FIAT, Crypto, etc.) directly or indirectly.</li> <li>Any odds must be clearly displayed on an ingame monitor, poster or sign and immediately updated before the next player comes in, and in the user interface where the player gambles. In the user interface where the player gambles, only the applicable odds may be shown to decrease clutter, but it is recommended to show all odds.</li> <li>When a gambling operator chooses to not use Kromer, regular items or Krist directly in the gambling machines, and chooses to use a coin system with an exchange rate, the following rules are applicable.<ol> <li>The exchange rate for the coins to ingame currency may be changed, but within reason and non frequent.</li> </ol> </li> <li>If there isn't an exchange between non currency used while gambling and ingame currency, this should be properly communicated to players on an ingame monitor, poster or sign and in the user interface where the player gambles.</li> <li>Any currency gained while gambling must be able to be paid out by the gambling operator to the player at all times.</li> </ol> </li> </ol>"},{"location":"rules/#evasion","title":"Evasion","text":"<ol> <li>Attempting to evade a previous punishment is not allowed</li> <li>Staff interpret the rules, you cannot argue about special cases.</li> <li>\"Talking back\" to staff or otherwise being rude or disrespectful is not allowed</li> <li>Harassing other players or staff regarding the reasoning for a mute or ban is not allowed</li> <li>Arguing with the terms of the mute or ban is not allowed.</li> </ol>"},{"location":"rules/#alt-accounts","title":"Alt accounts","text":"<ol> <li>It is allowed to have up to 2 accounts, that is one main account and one alt account.</li> <li>Alt accounts must donate 100% of their income from the server, not doing so is considered theft.</li> </ol>"},{"location":"rules/#notes","title":"Notes","text":"<ul> <li>The staff team interprets the rules. You cannot argue about special cases.</li> <li>Actions not explicitly stated in the rules are special cases and fall under the discretion of the staff members.</li> <li>You are not retroactively punished after being the reason for a new rule.</li> </ul>"},{"location":"chatbox/","title":"Chatbox Introduction","text":"<p>ReconnectedCC uses a server-side chatbox system (instead of peripherals). This has several benefits:</p> <ul> <li>The player does not need to craft any additional items to use a chatbox</li> <li>The chatbox API can be accessed from outside the game (e.g. a web server)</li> <li>Chatboxes can receive messages from Discord and other chatboxes</li> <li>Improved moderation capabilities for staff</li> </ul> <p>The ComputerCraft-compatible Lua API is built into the rom, and can be used straight away with a  single command.</p>"},{"location":"chatbox/#original","title":"Original","text":"<p>This Chatbox documentation is a fork of SwitchCraft 3's Chatbox.</p> <p>The original documentation source can be found here: SwitchCraftCC/sc-docs/#9e147fa.</p> <p>The documentation and assets within this Chatbox directory are licensed under the CC-BY-SA-4.0 license.</p>"},{"location":"chatbox/computercraft/","title":"ComputerCraft API","text":""},{"location":"chatbox/computercraft/#license-registration","title":"License registration","text":"<ul> <li>If you want to send messages to players from your chatbox, you'll need to register a license key. You can   do this with the in-game command: <code>/chatbox license register</code>.</li> <li>Add the license key to the computer by running <code>chatbox register &lt;key&gt;</code> - you can click to copy in-game.</li> <li>Otherwise, to set the computer as a chatbox computer as a guest (can receive but not send messages and events), run <code>chatbox register guest</code>.</li> <li>You can now use the global <code>chatbox</code> API and receive events from the server!</li> </ul>"},{"location":"chatbox/computercraft/#basic-chat-logger-program","title":"Basic chat logger program","text":"<p>This is an example program that will log public messages, and print them to the terminal:</p> <pre><code>while true do\n    local event, user, message, data = os.pullEvent(\"chat_ingame\")\n\n    print(string.format(\"&lt;%s&gt; %s\", user, message))\nend\n</code></pre>"},{"location":"chatbox/computercraft/#basic-command-based-chatbot","title":"Basic command-based chatbot","text":"<p>This is an example chatbot that uses backslash commands (<code>\\commands</code>), and responds to the user privately with <code>chatbox.tell</code>. The bot responds to the command <code>\\echo</code>, with whatever text the user sent it.</p> <p>This will require the license to be registered with <code>/chatbox license register</code> and added to the computer with <code>chatbox register</code>.</p> <pre><code>if not chatbox.hasCapability(\"command\") or not chatbox.hasCapability(\"tell\") then\n    error(\"Chatbox does not have the required permissions. Did you register the license?\")\nend\n\nlocal BOT_NAME = \"&amp;cMy Bot\" -- You can colour bot names!\n\nwhile true do\n    local event, user, command, args = os.pullEvent(\"command\")\n\n    if command == \"echo\" then\n        if #args &gt; 0 then\n            chatbox.tell(user, \"Received: \" .. table.concat(args, \" \"), BOT_NAME)\n        else\n            chatbox.tell(user, \"Send some text to be echoed!\", BOT_NAME)\n        end\n    end\nend\n</code></pre> <p></p>"},{"location":"chatbox/computercraft/#events","title":"Events","text":""},{"location":"chatbox/computercraft/#in-game-chat-event","title":"In-game chat event","text":"<p>The event received when a player posts a message in public chat.</p> Name Argument Description <code>event</code> <code>\"chat_ingame\"</code> <code>user</code> The username of the user that sent this message (or their UUID if they don't have a name) <code>message</code> The full raw text of their message (including markdown characters) <code>data</code> Table containing the full Event packet"},{"location":"chatbox/computercraft/#discord-chat-event","title":"Discord chat event","text":"<p>The event received when a player posts a message in Discord.</p> Name Argument Description <code>event</code> <code>\"chat_discord\"</code> <code>user</code> The username and discriminator (e.g. <code>Lemmmy#8924</code>) of the user that sent this message (or their Snowflake ID if they don't have a name) <code>message</code> The full raw text of their message (including markdown characters) <code>data</code> Table containing the full Event packet"},{"location":"chatbox/computercraft/#chatbox-chat-event","title":"Chatbox chat event","text":"<p>{: .warning }</p> <p>Not yet implemented</p> <p>The event received when another chatbox sends a message.</p> Name Argument Description <code>event</code> <code>\"chat_chatbox\"</code> <code>name</code> The name of the chatbox <code>user</code> The username of the user that owns this chatbox (or their UUID if they don't have a name) <code>message</code> The full raw text of their message (including markdown or formatting characters) <code>data</code> Table containing the full Event packet"},{"location":"chatbox/computercraft/#command-event","title":"Command event","text":"<p>The event received when a player runs a backslash command (<code>\\command</code>) in-game.</p> Name Argument Description <code>event</code> <code>\"command\"</code> <code>user</code> The username of the user that owns this chatbox (or their UUID if they don't have a name) <code>command</code> The command the user ran <code>args</code> A table containing the space-separated arguments of the command (excluding the command itself) <code>data</code> Table containing the full Event packet"},{"location":"chatbox/computercraft/#join-event","title":"Join event","text":"<p>The event received when a player joins the game.</p> Name Argument Description <code>event</code> <code>\"join\"</code> <code>user</code> The username of the user that joined (or their UUID if they don't have a name) <code>data</code> Table containing the full Event packet"},{"location":"chatbox/computercraft/#leave-event","title":"Leave event","text":"<p>The event received when a player leaves the game.</p> Name Argument Description <code>event</code> <code>\"leave\"</code> <code>user</code> The username of the user that left (or their UUID if they don't have a name) <code>data</code> Table containing the full Event packet"},{"location":"chatbox/computercraft/#death-event","title":"Death event","text":"<p>The event received when a player dies in-game.</p> Name Argument Description <code>event</code> <code>\"death\"</code> <code>user</code> The username of the user that died (or their UUID if they don't have a name) <code>source</code> The name (or UUID) of the thing that killed the player, or <code>nil</code> <code>text</code> The text of the death message <code>data</code> Table containing the full Event packet"},{"location":"chatbox/computercraft/#world-change-event","title":"World change event","text":"<p>The event received when a player changes worlds.</p> Name Argument Description <code>event</code> <code>\"world_change\"</code> <code>user</code> The username of the user that changed worlds. <code>origin</code> The identifier string of the world the user has moved from. <code>destination</code> The identifier string of the world the user is now in. <code>data</code> Table containing the full Event packet"},{"location":"chatbox/computercraft/#afk-event","title":"AFK event","text":"<p>{: .warning }</p> <p>Not yet implemented</p> <p>The event received when a player goes AFK in-game.</p> Name Argument Description <code>event</code> <code>\"afk\"</code> <code>user</code> The username of the user that went AFK (or their UUID if they don't have a name) <code>data</code> Table containing the full Event packet"},{"location":"chatbox/computercraft/#afk-return-event","title":"AFK return event","text":"<p>{: .warning }</p> <p>Not yet implemented</p> <p>The event received when a player returns from being AFK in-game.</p> Name Argument Description <code>event</code> <code>\"afk_return\"</code> <code>user</code> The username of the user that went AFK (or their UUID if they don't have a name) <code>data</code> Table containing the full Event packet"},{"location":"chatbox/computercraft/#server-restart-scheduled-event","title":"Server restart scheduled event","text":"<p>{: .warning }</p> <p>Not yet implemented</p> <p>The event received when a server restart has been scheduled.</p> <p>If a server restart was scheduled before the websocket connected, then the <code>server_restart_scheduled</code> event will be sent after the chatbox API has connected. In this case, <code>restartSeconds</code> will not be the time until the restart, but  instead the time that was initially specified for the restart. If the precise restart time is required, it can be accessed via the <code>restartAt</code> field (ISO-8601) of the <code>data</code> table, which contains the full  Event packet.</p> Name Argument Description <code>event</code> <code>\"server_restart_scheduled\"</code> <code>type</code> The type of restart. Will be <code>\"automatic\"</code> or <code>\"manual\"</code>. <code>seconds</code> The number of seconds specified until the restart. <code>data</code> Table containing the full Event packet"},{"location":"chatbox/computercraft/#server-restart-cancelled-event","title":"Server restart cancelled event","text":"<p>{: .warning }</p> <p>Not yet implemented</p> <p>The event received when a previously scheduled server restart has now been cancelled.</p> Name Argument Description <code>event</code> <code>\"server_restart_cancelled\"</code> <code>type</code> The type of restart. Will be <code>\"automatic\"</code> or <code>\"manual\"</code>. <code>data</code> Table containing the full Event packet"},{"location":"chatbox/computercraft/#functions","title":"Functions","text":""},{"location":"chatbox/computercraft/#chatboxsaytext-name-mode","title":"chatbox.say(text, name, mode)","text":"<p>Sends a message to public chat. You'll need explicit permission from a member of staff to get this capability.</p> <p>{: .warning }</p> <p>This requires your license to have the <code>say</code> capability, which most do not.</p> <p>You can use these formatting modes:</p> <ul> <li><code>markdown</code> - Discord-like markdown formatting. Supports URLs, but not colours.</li> <li><code>format</code> - Minecraft-like formatting strings (e.g. <code>&amp;e</code> for yellow). Supports colours, but not URLs.</li> <li><code>minimessage</code> - HTML-like formatting strings (e.g. <code>&lt;yellow&gt;&lt;/yellow&gt;</code> for yellow). Supports colours and hover events.</li> </ul> Name Argument Description <code>text</code> The message to send to chat <code>name</code> (optional) The name of this chatbox (shows in the name tag) <code>mode</code> (optional) The text formatting mode to use. Must be <code>markdown</code>, <code>format</code> or <code>minimessage</code>. Defaults to <code>markdown</code>"},{"location":"chatbox/computercraft/#chatboxtelluser-text-name-mode","title":"chatbox.tell(user, text, name, mode)","text":"<p>Sends a private message to a user. Note: this requires you to register a chatbox license with <code>/chatbox license register</code>.</p> <p>You can use these formatting modes:</p> <ul> <li><code>markdown</code> - Discord-like markdown formatting. Supports URLs, but not colours.</li> <li><code>format</code> - Minecraft-like formatting strings (e.g. <code>&amp;e</code> for yellow). Supports colours, but not URLs.</li> <li><code>minimessage</code> - HTML-like formatting strings (e.g. <code>&lt;yellow&gt;&lt;/yellow&gt;</code> for yellow). Supports colours and hover events.</li> </ul> Name Argument Description <code>user</code> The username of the user to send a message to <code>text</code> The message to send to chat <code>name</code> (optional) The name of this chatbox (shows in the name tag) <code>mode</code> (optional) The text formatting mode to use. Must be <code>markdown</code>, <code>format</code> or <code>minimessage</code>. Defaults to <code>markdown</code>"},{"location":"chatbox/computercraft/#chatboxgetplayers","title":"chatbox.getPlayers()","text":"<p>Returns a table of user objects that are currently online in-game.</p>"},{"location":"chatbox/computercraft/#chatboxgetplayerlist","title":"chatbox.getPlayerList()","text":"<p>Returns a list of player usernames that are currently online in-game. You should probably use <code>chatbox.getPlayers()</code> instead.</p>"},{"location":"chatbox/computercraft/#chatboxhascapabilitycapability","title":"chatbox.hasCapability(capability)","text":"<p>Checks if the chatbox license has the specified capability. Valid capabilities:</p> Capability Defaults Description <code>read</code> Guest, registered Read messages from in-game chat and Discord, and receive events such as joining and leaving. <code>command</code> Registered Receive in-game backslash commands. <code>tell</code> Registered Send private messages to individual players. <code>say</code> None Send public messages to the whole in-game chat."},{"location":"chatbox/computercraft/#chatboxgetlicenseowner","title":"chatbox.getLicenseOwner()","text":"<p>Returns the username and user object of the player that owns this chatbox license.</p>"},{"location":"chatbox/computercraft/#chatboxisconnected","title":"chatbox.isConnected()","text":"<p>Returns whether the chatbox is connected to the API.</p>"},{"location":"chatbox/computercraft/#chatboxisguest","title":"chatbox.isGuest()","text":"<p>Returns whether the chatbox is connected with the guest license.</p>"},{"location":"chatbox/websocket/","title":"Websocket API","text":""},{"location":"chatbox/websocket/#connection","title":"Connection","text":"<p>You can access the chatbox API via websocket at <code>wss://chat.reconnected.cc/v2</code>. Add your license key onto the end, e.g. <code>wss://chat.reconnected.cc/v2/5c80b08d-9c68-4df3-83b8-8a8008196934</code>, or use <code>wss://chat.reconnected.cc/v2/guest</code> to connect as a  guest (only allowed in-game).</p> <p>The API uses JSON for sending and receiving packets. Packet payloads will have a <code>type</code> property, and packets from the server will additionally contain an <code>ok</code> property, to let you know if something was successful or not.</p> <p>When sending chat messages to the server, you can specify an integer <code>id</code> property to uniquely identify your packet. Then, when the message has been successfully sent, you will receive a <code>success</code> packet with the same <code>id</code>.</p>"},{"location":"chatbox/websocket/#rate-limits","title":"Rate limits","text":"<p>Messages can be sent at most once per 0.5 seconds per license, with up to 5 messages queued at once. Any more than that, and you will receive <code>\"error\": \"rate_limited\"</code>.</p>"},{"location":"chatbox/websocket/#server-to-client-packets","title":"Server-to-client packets","text":""},{"location":"chatbox/websocket/#hello-packet","title":"Hello packet","text":"<p>When you connect to the socket successfully, you will receive a <code>hello</code> payload that looks like this:</p> <pre><code>{\n  \"ok\": true,\n  \"type\": \"hello\",\n  \"guest\": false,\n  \"licenseOwner\": \"Yemmel\",\n  \"licenseOwnerUser\": {\n    \"type\": \"ingame\",\n    \"name\": \"Yemmel\",\n    \"displayName\": \"Yemmel\",\n    \"uuid\": \"07b382be-f2a8-4bf0-b9f5-c3a1b73c18c7\",    \n    /* ... the rest of the User Object */ \n  },\n  \"capabilities\": [\"tell\", \"read\", \"command\", \"say\"]\n}\n</code></pre>"},{"location":"chatbox/websocket/#players-packet","title":"Players packet","text":"<p>If you have the <code>read</code> capability, you will also receive the <code>players</code> packet when you connect, and whenever somebody joins or leaves. It will contain an array of user objects as <code>players</code>:</p> <pre><code>{\n  \"type\": \"players\",\n  \"ok\": true,\n  \"time\": \"2019-02-18T15:16:24Z\",\n  \"players\": [{\n    \"type\": \"ingame\",\n    \"name\": \"Yemmel\",\n    \"displayName\": \"Yemmel\",\n    \"uuid\": \"07b382be-f2a8-4bf0-b9f5-c3a1b73c18c7\",\n    \"group\": \"admin\",\n    \"pronouns\": \"he/they\",\n    \"world\": \"minecraft:overworld\",\n    \"afk\": false,\n    \"alt\": false,\n    \"bot\": false,\n    \"supporter\": 0,\n    \"linkedUser\": { /* ... */ }\n  }]\n}\n</code></pre>"},{"location":"chatbox/websocket/#event-packet","title":"Event packet","text":"<p>When an event occurs, and you have the <code>read</code> capability, you will receive an <code>event</code> packet. It will have an  <code>event</code> parameter specifying which type of event occurred. They may also contain a <code>user</code> object  (player), <code>source</code> (player), <code>text</code> (string), <code>rawText</code> (string), and  <code>renderedText</code> (raw JSON text). </p> <p>The <code>user</code> property is a player object for all in-game events. The <code>discordUser</code> property is a Discord user object for Discord message events (<code>chat_discord</code>).</p> <p>A full list of event types and the parameters they return can be found under Events.</p>"},{"location":"chatbox/websocket/#examples","title":"Examples","text":"<p>Example of an <code>event</code> packet for the <code>chat_ingame</code> event:</p> <pre><code>{\n  \"type\": \"event\",\n  \"event\": \"chat_ingame\",\n  \"ok\": true,\n  \"time\": \"2019-02-21T00:33:32+01:00\",\n  \"edited\": false,\n  \"text\": \"Hello world\",\n  \"rawText\": \"Hello **world**\",\n  \"renderedText\": { /* ...raw JSON text... */ },\n  \"user\": {\n    \"type\": \"ingame\",\n    \"name\": \"Yemmel\",\n    \"displayName\": \"Yemmel\",\n    \"uuid\": \"07b382be-f2a8-4bf0-b9f5-c3a1b73c18c7\",\n    \"group\": \"admin\",\n    \"pronouns\": \"he/they\",\n    \"world\": \"minecraft:overworld\",\n    \"afk\": false,\n    \"alt\": false,\n    \"bot\": false,\n    \"supporter\": 0,\n    \"linkedUser\": { /* ... */ }\n  }\n}\n</code></pre> <p>Example of an <code>event</code> packet for a <code>chat_discord</code> event:</p> <pre><code>{\n  \"type\": \"event\",\n  \"event\": \"chat_discord\",\n  \"ok\": true,\n  \"discordId\": \"693312311141597245\", // The message snowflake ID\n  \"text\": \"test\",\n  \"rawText\": \"test\",\n  \"renderedText\": { /* ...tellraw object... */ },\n  \"discordUser\": {\n    \"type\": \"discord\",\n    \"id\": \"478798120650670091\",\n    \"name\": \"Lemmmy\",\n    \"displayName\": \"Lemmmy\",\n    \"discriminator\": \"8924\",\n    \"roles\": [{\n      \"id\": \"198138742333112320\",\n      \"name\": \"Administrator\",\n      \"colour\": 15158332\n    }],\n    \"linkedUser\": { /* ... */ }\n  },\n  \"time\": \"2020-03-28T05:15:36+01:00\",\n  \"edited\": false,\n  \"id\": -1\n}\n</code></pre> <p>Example of an <code>event</code> packet for the <code>death</code> event:</p> <pre><code>{\n  \"type\": \"event\",\n  \"ok\": true,\n  \"time\": \"2020-03-28T04:13:20+01:00\",\n  \"event\": \"death\",\n  \"text\": \"Yemmel died\",\n  \"renderedText\": { /* ...raw JSON text... */ },\n  \"user\": {\n    \"type\": \"ingame\",\n    \"name\": \"Yemmel\",\n    \"displayName\": \"Yemmel\",\n    \"uuid\": \"07b382be-f2a8-4bf0-b9f5-c3a1b73c18c7\",\n    \"group\": \"admin\",\n    \"pronouns\": \"he/they\",\n    \"world\": \"minecraft:overworld\",\n    \"afk\": false,\n    \"alt\": false,\n    \"bot\": false,\n    \"supporter\": 0,\n    \"linkedUser\": { /* ... */ }\n  },\n  \"source\": { /* ...player object... */ },\n}\n</code></pre>"},{"location":"chatbox/websocket/#success-packet","title":"Success packet","text":"<p>When sending chat messages to the server, you can specify an integer <code>id</code> property to uniquely identify your packet. Then, when the message has been successfully sent, you will receive a <code>success</code> packet with the same <code>id</code>.</p> <p>If your message was sent immediately, the success reason will be <code>message_sent</code>. If you were rate limited and your message was added to the queue, the success reason will be <code>message_queued</code>.</p> <p>Example of a <code>success</code> packet:</p> <pre><code>{\n  \"type\": \"success\",\n  \"ok\": true,\n  \"id\": 1,\n  \"reason\": \"message_sent\"\n}\n</code></pre>"},{"location":"chatbox/websocket/#error-packet","title":"Error packet","text":"<p>When an error occurs, you will receive an <code>error</code> payload containing: - <code>ok</code> - <code>false</code> - <code>type</code> - <code>error</code> - <code>error</code> - The type of error that occurred. - <code>message</code> - A human-readable message describing the error.</p> <p>Possible errors that you may receive:</p> Error Message <code>invalid_json</code> You have a syntax error in your JSON. <code>not_connected</code> Your connection isn't ready yet - please wait for the 'hello' message before sending anything. <code>missing_type</code> The 'type' argument is required. <code>unknown_type</code> Unrecognised message type. <code>unknown_error</code> An unknown error occurred. <code>missing_capability</code> You don't have the required capability to run this. <code>missing_text</code> The 'text' argument is required. <code>missing_user</code> The 'user' argument is required. <code>unknown_user</code> That user is not online. <code>rate_limited</code> You are sending too many messages, please slow down. <code>text_too_large</code> Your text is too large. <code>name_too_large</code> Your name is too large."},{"location":"chatbox/websocket/#closing-packet","title":"Closing packet","text":"<p>When your websocket connection is being closed by the server, you may receive a <code>closing</code> packet with the following: - <code>ok</code> - <code>false</code> - <code>type</code> - <code>closing</code> - <code>closeReason</code> - The reason your connection is being closed. - <code>reason</code> - A human-readable message describing the close reason.</p> <p>Possible errors that you may receive:</p> Close reason Message <code>server_stopping</code> Server is restarting, please reconnect in a few minutes <code>external_guests_not_allowed</code> External guests are not allowed <code>unknown_license_key</code> Unknown license key. Get one with /chatbox license register <code>invalid_license_key</code> Invalid license key. Get one with /chatbox license register <code>disabled_license</code> Your license has been disabled. Please contact a member of staff <code>changed_license_key</code> Your license key was invalidated <code>fatal_error</code> A fatal error occurred. <code>unsupported_endpoint</code> Unsupported websocket endpoint. Supported endpoints: <code>/v2/:token</code>"},{"location":"chatbox/websocket/#client-to-server-packets","title":"Client-to-server packets","text":""},{"location":"chatbox/websocket/#say-packet","title":"Say packet","text":"<p>Sends a message to the in-game public chat.</p>"},{"location":"chatbox/websocket/#packet-parameters","title":"Packet parameters","text":"<ul> <li><code>type</code> - <code>say</code></li> <li><code>text</code> - The message to send.</li> <li><code>name</code> - (optional) The name of the chatbox to show. If no name is specified, it will default to the username of the    license owner.</li> <li><code>mode</code> - (optional) The formatting mode to use. You can use these formatting modes:</li> <li><code>markdown</code> - (default) Discord-like Markdown syntax.     Supports URLs, but not colours.</li> <li><code>format</code> - Minecraft-like formatting codes using ampersands     (e.g. <code>&amp;e</code> for yellow). Supports colours, but not URLs.</li> <li><code>minimessage</code> - HTML-like tags     (e.g. <code>&lt;yellow&gt;&lt;/yellow&gt;</code> for yellow). Supports colours and hover events.</li> <li><code>id</code> - (optional) Numeric ID to identify this message. If specified, the <code>success</code> response    packet will contain this ID so you can identify when this specific message has been sent.</li> </ul> <p>Example of a <code>say</code> packet:</p> <pre><code>{\n  \"type\": \"say\",\n  \"name\": \"My Bot\", // name of the chatbox, as it appears in the chat\n  \"text\": \"Hello, world!\",\n  \"mode\": \"markdown\" // \"markdown\" or \"format\"\n}\n</code></pre>"},{"location":"chatbox/websocket/#tell-packet","title":"Tell packet","text":"<p>Sends a private message to an in-game player. The <code>user</code> parameter can be a player's username or a UUID. If the player is not online in-game, you will receive the <code>unknown_user</code> error.</p>"},{"location":"chatbox/websocket/#packet-parameters_1","title":"Packet parameters","text":"<ul> <li><code>type</code> - <code>tell</code></li> <li><code>user</code> - The username or UUID of the user to send the message to.</li> <li><code>text</code> - The message to send.</li> <li><code>name</code> - (optional) The name of the chatbox to show. If no name is specified, it will default to the username of the   license owner.</li> <li><code>mode</code> - (optional) The formatting mode to use. You can use these formatting modes:</li> <li><code>markdown</code> - (default) Discord-like Markdown syntax.     Supports URLs, but not colours.</li> <li><code>format</code> - Minecraft-like formatting codes using ampersands     (e.g. <code>&amp;e</code> for yellow). Supports colours, but not URLs.</li> <li><code>minimessage</code> - HTML-like tags     (e.g. <code>&lt;yellow&gt;&lt;/yellow&gt;</code> for yellow). Supports colours and hover events.</li> <li><code>id</code> - (optional) Numeric ID to identify this message. If specified, the <code>success</code> response   packet will contain this ID so you can identify when this specific message has been sent.</li> </ul> <p>Example of a <code>tell</code> packet:</p> <pre><code>{\n  \"type\": \"tell\",\n  \"user\": \"Lemmmy\",\n  \"name\": \"My Bot\", // name of the chatbox, as it appears in the chat\n  \"text\": \"Hello, world!\",\n  \"mode\": \"markdown\" // \"markdown\" or \"format\"\n}\n</code></pre>"},{"location":"chatbox/websocket/#events","title":"Events","text":"<p>Supported events:</p> <ul> <li><code>chat_ingame</code> - A player sent a message in-game.</li> <li><code>chat_discord</code> - A player sent a message from Discord.</li> <li><code>command</code> - A player sent a chatbox command in-game (<code>\\command</code>, <code>^command</code> or <code>|command</code>).</li> <li><code>join</code> - A player joined the server. Will contain the <code>user</code> property.</li> <li><code>leave</code> - A player left the server. Will contain the <code>user</code> property.</li> <li><code>death</code> - A player died. Will contain the <code>user</code>, <code>text</code> and <code>renderedText</code> properties, and may also    contain the <code>source</code> property, if one exists.</li> <li><code>world_change</code> - A player changed worlds. Will contain the <code>user</code> property.</li> </ul> <p>Not yet supported events:</p> <ul> <li><code>afk</code> - A player went AFK (<code>/afk</code>). Will contain the <code>user</code> property.</li> <li><code>afk_return</code> - A player returned from being AFK (<code>/afk</code>). Will contain the <code>user</code> property.</li> <li><code>server_restart_scheduled</code> - The server will restart soon. </li> <li><code>server_restart_cancelled</code> - The scheduled server restart was cancelled.</li> <li><code>chat_chatbox</code> - A chatbox sent a message.</li> </ul>"},{"location":"chatbox/websocket/#in-game-chat-event","title":"In-game chat event","text":"<p>The event received when a player posts a message in public chat.</p> Name Type Argument Description <code>event</code> string <code>\"chat_ingame\"</code> <code>text</code> string The message contents, without formatting codes. <code>rawText</code> string The message contents, with its original formatting codes. <code>renderedText</code> JSON text The message contents, serialised with formatting as Minecraft JSON text. <code>user</code> User object The in-game player who sent the message. <code>time</code> string The time (as ISO-8601) this message was sent according to the server. Example payload of the <code>chat_ingame</code> event <pre><code>{\n  \"ok\": true,\n  \"type\": \"event\",\n  \"id\": -1,\n  \"event\": \"chat_ingame\",\n  \"text\": \"Hello, world!\",\n  \"rawText\": \"Hello, world!\",\n  \"renderedText\": {\n    \"extra\": [\n      {\n        \"text\": \"Hello, world!\"\n      }\n    ],\n    \"text\": \"\"\n  },\n  \"user\": {\n    \"type\": \"ingame\",\n    \"name\": \"Lemmmy\",\n    \"uuid\": \"cdb33b76-a445-47a1-b13d-94f34e006243\",\n    \"displayName\": \"Lemmmy\",\n    \"group\": \"default\",\n    \"pronouns\": \"he/they\",\n    \"world\": \"minecraft:overworld\",\n    \"afk\": false,\n    \"alt\": false,\n    \"bot\": false,\n    \"supporter\": 0,\n    \"linkedUser\": { /* ... */ }\n  },\n  \"time\": \"2022-07-12T18:54:01+01:00\"\n}\n</code></pre>"},{"location":"chatbox/websocket/#discord-chat-event","title":"Discord chat event","text":"<p>The event received when a player posts a message in Discord.</p> Name Type Argument Description <code>event</code> string <code>\"chat_discord\"</code> <code>text</code> string The message contents, without Markdown formatting codes. <code>rawText</code> string The message contents, with its original Markdown formatting codes. <code>renderedText</code> JSON text The message contents, serialised with formatting as Minecraft JSON text. <code>discordId</code> string The Discord snowflake ID of this message. <code>discordUser</code> Discord user The Discord user who sent the message. <code>edited</code> boolean <code>true</code> if this event represents an edit to the original message. <code>time</code> string The time (as ISO-8601) this message was sent according to Discord. Example payload of the <code>chat_discord</code> event <pre><code>{\n  \"ok\": true,\n  \"type\": \"event\",\n  \"id\": -1,\n  \"event\": \"chat_discord\",\n  \"text\": \"Hello, world!\",\n  \"rawText\": \"Hello, world!\",\n  \"renderedText\": {\n    \"extra\": [\n      {\n        \"text\": \"Hello, world!\"\n      }\n    ],\n    \"text\": \"\"\n  },\n  \"discordId\": \"996474482015350814\",\n  \"discordUser\": {\n    \"type\": \"discord\",\n    \"id\": \"478798120650670091\",\n    \"name\": \"Lemmmy\",\n    \"displayName\": \"remi\",\n    \"discriminator\": \"4600\",\n    \"avatar\": \"https://cdn.discordapp.com/avatars/478798120650670091/9515e4c502041370671112ed364de8a2.png\",\n    \"roles\": [{\n      \"id\": \"198138742333112320\",\n      \"name\": \"Administrator\",\n      \"colour\": 15158332\n    }],\n    \"linkedUser\": { /* The linked Minecraft player, if available */ }\n  },\n  \"edited\": false,\n  \"time\": \"2022-07-12T18:53:50+01:00\"\n}\n</code></pre>"},{"location":"chatbox/websocket/#chatbox-chat-event","title":"Chatbox chat event","text":"<p>Warning</p> <p>Not yet implemented</p> <p>The event received when another chatbox sends a message.</p> Name Type Argument Description <code>event</code> string <code>\"chat_chatbox\"</code> <code>text</code> string The message contents, without formatting codes. <code>rawText</code> string The message contents, with its original formatting codes. <code>renderedText</code> JSON text The message contents, serialised with formatting as Minecraft JSON text. <code>user</code> User object The owner of the chatbox that sent the message. <code>name</code> string The name of the chatbox, without formatting codes. <code>rawName</code> string The name of the chatbox, with its original formatting codes. <code>time</code> string The time (as ISO-8601) this message was sent according to the server. Example payload of the <code>chat_chatbox</code> event <pre><code>{\n  \"ok\": true,\n  \"type\": \"event\",\n  \"id\": -1,\n  \"event\": \"chat_chatbox\",\n  \"text\": \"Hello, world!\",\n  \"rawText\": \"Hello, world!\",\n  \"renderedText\": {\n    \"text\": \"Hello, world!\"\n  },\n  \"user\": {\n    \"type\": \"ingame\",\n    \"name\": \"Yemmel\",\n    \"uuid\": \"07b382be-f2a8-4bf0-b9f5-c3a1b73c18c7\",\n    \"displayName\": \"Yemmel\",\n    \"group\": \"default\",\n    \"pronouns\": \"he/they\"\n  },\n  \"name\": \"Example\",\n  \"rawName\": \"Example\",\n  \"time\": \"2022-07-12T19:05:28+01:00\"\n}\n</code></pre>"},{"location":"chatbox/websocket/#command-event","title":"Command event","text":"<p>The event received when a player runs a chatbox command (public backslash commands: <code>\\command</code>, private owner-only caret/pipe commands: <code>^command</code>) in-game. The <code>command</code> capability is required to receive command events.</p> Name Type Argument Description <code>event</code> string <code>\"command\"</code> <code>user</code> User object The in-game player who ran the command. <code>command</code> string The name of the command (the word immediately following the backslash/caret/pipe, excluding the backslash/caret/pipe). <code>args</code> string[] Array of space-separated string arguments after the command. <code>ownerOnly</code> boolean <code>true</code> if the command is an owner-only command (<code>^command</code>). <code>time</code> string The time (as ISO-8601) this command was sent according to the server. Example payload of the <code>command</code> event (<code>\\example arg1 arg2 arg3</code>) <pre><code>{\n  \"ok\": true,\n  \"type\": \"event\",\n  \"id\": -1,\n  \"event\": \"command\",\n  \"user\": {\n    \"type\": \"ingame\",\n    \"name\": \"Lemmmy\",\n    \"uuid\": \"cdb33b76-a445-47a1-b13d-94f34e006243\",\n    \"displayName\": \"Lemmmy\",\n    \"group\": \"default\",\n    \"pronouns\": \"he/they\",\n    \"world\": \"minecraft:overworld\",\n    \"afk\": false,\n    \"alt\": false,\n    \"bot\": false,\n    \"supporter\": 0,\n    \"linkedUser\": { /* ... */ }\n  },\n  \"command\": \"example\",\n  \"args\": [\n    \"arg1\",\n    \"arg2\",\n    \"arg3\"\n  ],\n  \"ownerOnly\": false,\n  \"time\": \"2022-07-12T19:08:02+01:00\"\n}\n</code></pre>"},{"location":"chatbox/websocket/#join-event","title":"Join event","text":"<p>The event received when a player joins the game.</p> Name Type Argument Description <code>event</code> string <code>\"join\"</code> <code>user</code> User object The in-game player who joined. <code>time</code> string The time (as ISO-8601) the player joined according to the server. Example payload of the <code>join</code> event <pre><code>{\n  \"ok\": true,\n  \"type\": \"event\",\n  \"id\": -1,\n  \"event\": \"join\",\n  \"user\": {\n    \"type\": \"ingame\",\n    \"name\": \"Lemmmy\",\n    \"uuid\": \"cdb33b76-a445-47a1-b13d-94f34e006243\",\n    \"displayName\": \"Lemmmy\",\n    \"group\": \"default\",\n    \"pronouns\": \"he/they\"\n  },\n  \"time\": \"2022-07-12T20:10:07+01:00\"\n}\n</code></pre>"},{"location":"chatbox/websocket/#leave-event","title":"Leave event","text":"<p>The event received when a player leaves the game.</p> Name Type Argument Description <code>event</code> string <code>\"leave\"</code> <code>user</code> User object The in-game player who left. <code>time</code> string The time (as ISO-8601) the player left according to the server. Example payload of the <code>leave</code> event <pre><code>{\n  \"ok\": true,\n  \"type\": \"event\",\n  \"id\": -1,\n  \"event\": \"leave\",\n  \"user\": {\n    \"type\": \"ingame\",\n    \"name\": \"Lemmmy\",\n    \"uuid\": \"cdb33b76-a445-47a1-b13d-94f34e006243\",\n    \"displayName\": \"Lemmmy\",\n    \"group\": \"default\",\n    \"pronouns\": \"he/they\"\n  },\n  \"time\": \"2022-07-12T20:10:07+01:00\"\n}\n</code></pre>"},{"location":"chatbox/websocket/#death-event","title":"Death event","text":"<p>The event received when a player dies in-game.</p> Name Type Argument Description <code>event</code> string <code>\"death\"</code> <code>text</code> string The death message contents, without formatting codes. <code>rawText</code> string The death message contents, with its original formatting codes. <code>renderedText</code> JSON text The death message contents, serialised with formatting as Minecraft JSON text. <code>user</code> User object The in-game player who died. <code>source</code> User object The player that killed this player (if available), or <code>null</code>. <code>time</code> string The time (as ISO-8601) this player died according to the server. Example payload of the <code>death</code> event <pre><code>{\n  \"ok\": true,\n  \"type\": \"event\",\n  \"id\": -1,\n  \"event\": \"death\",\n  \"text\": \"Yemmel fell out of the world\",\n  \"rawText\": \"Yemmel fell out of the world\",\n  \"renderedText\": {\n    \"text\": \"Yemmel fell out of the world\"\n  },\n  \"user\": {\n    \"type\": \"ingame\",\n    \"name\": \"Yemmel\",\n    \"uuid\": \"07b382be-f2a8-4bf0-b9f5-c3a1b73c18c7\",\n    \"displayName\": \"Yemmel\",\n    \"group\": \"default\",\n    \"pronouns\": \"he/they\",\n    \"world\": \"minecraft:overworld\",\n    \"afk\": false,\n    \"alt\": false,\n    \"bot\": false,\n    \"supporter\": 0,\n    \"linkedUser\": { /* ... */ }\n  },\n  \"time\": \"2022-07-12T20:37:00+01:00\"\n}\n</code></pre>"},{"location":"chatbox/websocket/#world-change-event","title":"World change event","text":"<p>The event received when a player changes worlds.</p> Name Type Argument Description <code>event</code> string <code>\"world_change\"</code> <code>user</code> User object The in-game player who changed worlds. <code>origin</code> string The identifier string of the world the player has moved from. <code>destination</code> string The identifier string of the world the player is now in. Example payload of the <code>world_change</code> event <pre><code>{\n  \"ok\": true,\n  \"type\": \"event\",\n  \"id\": -1,\n  \"event\": \"world_change\",\n  \"user\": {\n    \"type\": \"ingame\",\n    \"name\": \"Yemmel\",\n    \"uuid\": \"07b382be-f2a8-4bf0-b9f5-c3a1b73c18c7\",\n    \"displayName\": \"Yemmel\",\n    \"group\": \"default\",\n    \"pronouns\": \"he/they\",\n    \"world\": \"minecraft:the_nether\",\n    \"afk\": true\n  },\n  \"origin\": \"minecraft:overworld\",\n  \"destination\": \"minecraft:the_nether\"\n}\n</code></pre>"},{"location":"chatbox/websocket/#afk-event","title":"AFK event","text":"<p>Warning</p> <p>Not yet implemented</p> <p>The event received when a player goes AFK in-game.</p> Name Type Argument Description <code>event</code> string <code>\"afk\"</code> <code>user</code> User object The in-game player who went AFK. <code>time</code> string The time (as ISO-8601) this player went AFK according to the server. Example payload of the <code>afk</code> event <pre><code>{\n  \"ok\": true,\n  \"type\": \"event\",\n  \"id\": -1,\n  \"event\": \"afk\",\n  \"user\": {\n    \"type\": \"ingame\",\n    \"name\": \"Yemmel\",\n    \"uuid\": \"07b382be-f2a8-4bf0-b9f5-c3a1b73c18c7\",\n    \"displayName\": \"Yemmel\",\n    \"group\": \"default\",\n    \"pronouns\": \"he/they\",\n    \"world\": \"minecraft:overworld\",\n    \"afk\": true\n  },\n  \"time\": \"2022-07-12T20:43:37+01:00\"\n</code></pre>"},{"location":"chatbox/websocket/#afk-return-event","title":"AFK return event","text":"<p>Warning</p> <p>Not yet implemented</p> <p>The event received when a player returns from being AFK in-game.</p> Name Type Argument Description <code>event</code> string <code>\"afk_return\"</code> <code>user</code> User object The in-game player who returned from being AFK. <code>time</code> string The time (as ISO-8601) this player returned from being AFK according to the server. Example payload of the <code>afk_return</code> event <pre><code>{\n  \"ok\": true,\n  \"type\": \"event\",\n  \"id\": -1,\n  \"event\": \"afk_return\",\n  \"user\": {\n    \"type\": \"ingame\",\n    \"name\": \"Yemmel\",\n    \"uuid\": \"07b382be-f2a8-4bf0-b9f5-c3a1b73c18c7\",\n    \"displayName\": \"Yemmel\",\n    \"group\": \"default\",\n    \"pronouns\": \"he/they\",\n    \"world\": \"minecraft:overworld\",\n    \"afk\": false,\n    \"alt\": false,\n    \"bot\": false,\n    \"supporter\": 0,\n    \"linkedUser\": { /* ... */ }\n  },\n  \"time\": \"2022-07-12T20:55:40+01:00\"\n}\n</code></pre>"},{"location":"chatbox/websocket/#server-restart-scheduled-event","title":"Server restart scheduled event","text":"<p>Warning</p> <p>Not yet implemented</p> <p>The event received when a server restart has been scheduled. At the time of <code>restartAt</code>, the server  will restart and the websocket will be disconnected with <code>server_stopping</code> (4000).</p> <p>If a server restart was scheduled before the websocket connected, then the <code>server_restart_scheduled</code> packet will be sent after the <code>hello</code> packet. In this case, <code>restartSeconds</code> will not be the time until the restart, but instead the time that was initially specified for the restart. <code>time</code> will still be the initial time the restart was scheduled, and <code>restartAt</code> will be the time the restart will happen.</p> Name Type Argument Description <code>event</code> string <code>\"server_restart_scheduled\"</code> <code>restartType</code> string The type of restart. Will be <code>\"automatic\"</code> or <code>\"manual\"</code>. <code>restartSeconds</code> number The number of seconds specified until the server restart. <code>restartAt</code> string The time (as ISO-8601) that the server will restart. <code>time</code> string The time (as ISO-8601) that this restart was scheduled. Example payload of the <code>server_restart_scheduled</code> event <pre><code>{\n  \"ok\": true,\n  \"type\": \"event\",\n  \"id\": -1,\n  \"event\": \"server_restart_scheduled\",\n  \"restartType\": \"manual\",\n  \"restartSeconds\": 60,\n  \"restartAt\": \"2022-07-16T03:23:17+01:00\",\n  \"time\": \"2022-07-16T03:22:17+01:00\"\n}\n</code></pre>"},{"location":"chatbox/websocket/#server-restart-cancelled-event","title":"Server restart cancelled event","text":"<p>Warning</p> <p>Not yet implemented</p> <p>The event received when a previously scheduled server restart has now been cancelled.</p> Name Type Argument Description <code>event</code> string <code>\"server_restart_cancelled\"</code> <code>restartType</code> string The type of restart. Will be <code>\"automatic\"</code> or <code>\"manual\"</code>. <code>time</code> string The time (as ISO-8601) that this restart was cancelled. Example payload of the <code>server_restart_cancelled</code> event <pre><code>{\n  \"ok\": true,\n  \"type\": \"event\",\n  \"id\": -1,\n  \"event\": \"server_restart_cancelled\",\n  \"restartType\": \"manual\",\n  \"time\": \"2022-07-16T03:24:46+01:00\"\n}\n</code></pre>"},{"location":"chatbox/websocket/#data-types","title":"Data types","text":"<p>The following data types may be returned by the API:</p>"},{"location":"chatbox/websocket/#user-object","title":"User object","text":"<p>The user object represents an in-game player.</p> <p>The <code>group</code> is the rank of the player. Valid groups are:</p> <ul> <li><code>default</code> - The default player group</li> <li><code>admin</code> - Staff of the server</li> </ul> <p>The <code>pronouns</code> string is the pronouns set by the user by running <code>/pronouns</code>. This may be <code>null</code> if the player has not set any preferred pronouns. Where reasonably possible, you should attempt to use the user's preferred pronouns, or avoid using pronouns entirely. If you are unable to do this, you should use the player's name instead.</p> <p>The <code>world</code> may be the world the player is in, or <code>null</code> if this information is not available. It will be a Minecraft namespaced registry key, for example:</p> <ul> <li><code>minecraft:overworld</code> - The overworld</li> <li><code>minecraft:the_nether</code> - The Nether</li> <li><code>minecraft:the_end</code> - The End</li> </ul> <p>The <code>supporter</code> field is the current public tier of the player's supporter status. This will be <code>0</code> if the player is not a supporter or has opted out of showing their supporter tag, <code>1</code> for a Tier 1 supporter, <code>2</code> for a Tier 2 supporter, and <code>3</code> for a Tier 3 supporter.</p> <p>If the player has linked their Discord account to their Minecraft account, then the <code>linkedUser</code> field will be present and will contain the linked Discord user (as a Discord user object). The nested Discord user will not contain another <code>linkedUser</code> field to avoid recursive serialization.</p> <p>Example of a user object:</p> <pre><code>{\n  \"type\": \"ingame\",\n  \"name\": \"Lemmmy\",\n  \"uuid\": \"cdb33b76-a445-47a1-b13d-94f34e006243\",\n  \"displayName\": \"Lemmmy\", // the name as it appears in chat, may differ from `name`\n  \"group\": \"admin\",\n  \"pronouns\": \"he/they\",\n  \"world\": \"minecraft:overworld\",\n  \"afk\": false,\n  \"alt\": false,\n  \"bot\": false,\n  \"supporter\": 0,\n  \"linkedUser\": { \n    /* The linked Discord user, if available */\n    \"type\": \"discord\",\n    /* ... */\n  }\n}\n</code></pre>"},{"location":"chatbox/websocket/#discord-user-object","title":"Discord user object","text":"<p>The Discord user object represents a user on Discord. If the user has linked their Discord account to their Minecraft account, then the <code>linkedUser</code> field will be present and will contain the linked Minecraft player (as a user object). The nested Minecraft player will not contain another <code>linkedUser</code> field to avoid recursive serialization.</p> <p>Example of a Discord user object:</p> <pre><code>{\n  \"type\": \"discord\",\n  \"id\": \"478798120650670091\",\n  \"name\": \"Lemmmy\",\n  \"displayName\": \"remi\",\n  \"discriminator\": \"4600\",\n  \"avatar\": \"https://cdn.discordapp.com/avatars/478798120650670091/9515e4c502041370671112ed364de8a2.png\",\n  \"roles\": [{\n    \"id\": \"198138742333112320\",\n    \"name\": \"Administrator\",\n    \"colour\": 15158332\n  }],\n  \"linkedUser\": { \n    /* The linked Minecraft player, if available */ \n    \"type\": \"ingame\",\n    /* ... */\n  }\n}\n</code></pre>"},{"location":"chatbox/websocket/#raw-json-text-object","title":"Raw JSON text object","text":"<p>Messages will be accompanied by their string representation (<code>text</code>) as well as their in-game rich text representation (<code>renderedText</code>). The rendered text is serialised as a JSON object conforming to the Minecraft  raw JSON text format. As rendered text is generated automatically by the server, it is not guaranteed that you will receive the same JSON for every version, and the serialised form may not be optimal or compact.</p> <p>Example of JSON text:</p> <pre><code>{\n  \"renderedText\": {\n    \"extra\": [\n      {\n        \"text\": \"Hello, world! \"\n      },\n      {\n        \"bold\": true,\n        \"text\": \"This text is bold.\"\n      }\n    ],\n    \"text\": \"\"\n  }\n}\n</code></pre>"},{"location":"faq/activetime/","title":"Active time","text":"<p>The server tracks active time for every player for Kromer welfare.</p> <p>The server ignores time spent AFK, and doesn't count it on top of your activetime.</p> <p>You can view your active time with the <code>/activetime</code> command. This will show you your total active time tracked.</p> <p>There is also the <code>/activetime leaderboard</code> command which shows a leaderboard of the players with the most time played on the server. </p>"},{"location":"faq/api/","title":"Server API","text":"<p>The server exposes an HTTP api with various bits of information for people to access</p> <p>The root URL is <code>https://api.reconnected.cc</code></p>"},{"location":"faq/api/#endpoints","title":"Endpoints","text":"Endpoint Description <code>/tps</code> Returns the TPS as a float <code>/mspt</code> Returns the current MSPT as a float. <code>/players</code> Returns the amount of players online on the server as an integer."},{"location":"faq/claiming/","title":"Claiming land","text":"<p>This guide shows you how to manage your claims.</p>"},{"location":"faq/claiming/#creating-a-claim","title":"Creating a claim","text":"<p>To create a claim, get a Golden Hoe by crafting it or running <code>/kits</code> and selecting the claim kit (the golden hoe). Holding the Golden Hoe will show you the amount of claim blocks you can use.</p> <p></p> <p>First, right-click on the first corner of the claim with your Golden Hoe, then right-click on the second corner of the claim. What you see should look like this:</p> <p></p> <p>Congratulations! You have now created your first claim!</p>"},{"location":"faq/claiming/#resizing-a-claim","title":"Resizing a claim","text":"<p>To resize your claim, get a Golden Hoe and a Stick by crafting them or running <code>/kits</code> and selecting the claim kit (the golden hoe).</p> <p>Right-click with your Stick where your claim is to view your claim borders.</p> <p></p> <p>Now, right-click on the corner you want to move with your Golden Hoe. The corner will be changed to Lapis Lazuli to indicate you're in resizing mode.</p> <p></p> <p>And now right-click where you want to move that corner to. If all went well you should have a resized claim!</p> <p></p>"},{"location":"faq/claiming/#editing-properties-of-your-claim","title":"Editing properties of your claim","text":"<p>To edit some properties of your claim (like claim flags, or adding players), use the <code>/flan menu</code> command while standing on top of your claim. This will pop up a menu that allows you to customize various properties of your claim.</p> <p></p>"},{"location":"faq/optional-mods/","title":"Choosing optional mods","text":"<p>This guide shows you the considerations that should be made when choosing any of our provided optional mods.</p> <p>Note that the optional mods have not been as thoroughly tested as our default mods, or might have some issues.</p>"},{"location":"faq/optional-mods/#sodium","title":"Sodium","text":"<p>Sodium is a mod that improves the performance of Minecraft. It should be installed along with Indium, to provide proper rendering support for 3d prints.</p> <p>Notice</p> <p>Sodium is enabled by default on the pack, as we think it is stable enough. Please report any bugs you see.</p>"},{"location":"faq/optional-mods/#iris-shaders","title":"Iris Shaders","text":"<p>Iris Shaders is a mod that adds shader support to our pack. It requires Sodium (and thus Indium) to be installed. It is not supported by Nvidium and some shader packs might not work with Distant Horizons.</p> <p>Notice</p> <p>Iris hasn't been added as it depends on Sodium.</p>"},{"location":"faq/optional-mods/#distant-horizons","title":"Distant Horizons","text":"<p>Distant Horizons is a mod that improves the client side render distance by creating LODs beyond the real chunks' render distance. It only works with shaders built with Distant Horizons support in mind.</p> <p>Notice</p> <p>Distant Horizons is not enabled by default due to the LOD ComputerCraft monitors not rendering their display. This mod is also in alpha and may be unstable.</p>"},{"location":"faq/optional-mods/#bobby","title":"Bobby","text":"<p>Bobby is a mod that improves the client side render distance by caching chunks it receives from the server. It renders the chunks as real Minecraft chunks.</p> <p>Notice</p> <p>Bobby is not enabled by default due to cached ComputerCraft monitors not rendering their display. Also, the data is stored locally and can get very large.</p>"},{"location":"faq/optional-mods/#vulkanmod","title":"VulkanMod","text":"<p>VulkanMod is a mod that replaces the default OpenGL renderer with an optimized renderer that uses the Vulkan API.</p> <p>Notice</p> <p>VulkanMod is not enabled by default due to older GPUs not supporting Vulkan.</p>"},{"location":"faq/optional-mods/#nvidium","title":"Nvidium","text":"<p>Nvidium replaces the rendering backend with NVIDIA exclusive OpenGL extensions to increase fps a lot, especially with huge render distances. Sodium (and thus Indium) should be installed for this to work. Nvidium disables itself when Iris is using a shader.</p> <p>Notice</p> <p>Nvidium hasn't been added as it only works for NVIDIA GeForce GTX 16xx cards and newer (GeForce RTX), and because its quite an experimental mod. We ship our own version of Nvidium that works with the latest version of Sodium, available here</p>"},{"location":"faq/pronouns/","title":"Pronouns","text":"<p>We have a pronouns mod that can display your pronouns in the tab menu.</p> <p>You will need to relog in order for your pronouns to show up ingame after you've changed them.</p> <p></p>"},{"location":"faq/pronouns/#setting-your-pronouns","title":"Setting your pronouns","text":"<p>You can choose from the following default pronouns:</p> <ul> <li><code>he</code></li> <li><code>him</code></li> <li><code>she</code></li> <li><code>her</code></li> <li><code>it</code></li> <li><code>its</code></li> <li><code>they</code></li> <li><code>them</code></li> <li><code>any</code></li> <li><code>ask</code></li> <li><code>avoid</code></li> <li><code>other</code></li> </ul> <p>Any of the pronouns can be used as a single pronoun, You can also pair up pronouns.</p> <p>Example</p> <p>To enter the they/them pronoun pair, run <code>/pronouns they them</code></p> <p>To enter the other pronoun, run <code>/pronouns other</code></p> <p>Notice</p> <p>Custom pronouns may be requested by DMing a staff member.</p>"},{"location":"faq/proxies/","title":"Proxies","text":"<p>Note</p> <p>We now recommend you use the proxy selection UI shipped in the pack in order to select a proxy</p> <p>We have a few proxies available seperate from the standard IP if you're unable to join or if the connection is unstable through the primary IP address (<code>play.reconnected.cc</code>)</p> <ul> <li><code>play.reconnected.cc</code> - Our main server hosted in Helsinki, Finland.</li> <li><code>us-ky.reconnected.cc</code> - A proxy hosted in Hopkinsville, Kentucky, USA.</li> </ul> <p>To add and use a proxy, press the three dots next to the <code>Play ReconnectedCC</code> button to open the multiplayer UI</p> <p></p> <p>Then add the proxy as you would a regular server.</p>"},{"location":"faq/rom/","title":"The ReconnectedCC ROM","text":"<p>Here are the programs included in the ComputerCraft ROM on ReconnectedCC.</p> <p>The GitHub repo for the ReconnectedCC ROM can be found at https://github.com/ReconnectedCC/cc-rom</p>"},{"location":"faq/rom/#libraries","title":"Libraries","text":""},{"location":"faq/rom/#bigfontlua","title":"bigfont.lua","text":"<p>A library by Wojbie that allows you to write bigger text than the stock font</p>"},{"location":"faq/rom/#switchcraftlua","title":"switchcraft.lua","text":"<p>An SC3 and SC2 compatible API, for backwards compatibility with older applications.</p>"},{"location":"faq/rom/#reconnectedlua","title":"reconnected.lua","text":"<p>An API specific to the ReconnectedCC server</p>"},{"location":"faq/rom/#programs","title":"Programs","text":""},{"location":"faq/rom/#cloud-catcher","title":"Cloud Catcher","text":"<p>A web interface for ComputerCraft, allowing you to remote into computers and edit files on them</p>"},{"location":"faq/rom/#ninja-catcher","title":"Ninja Catcher","text":"<p>Cloud Catcher but with raised file size limits</p>"},{"location":"faq/rom/#mbs","title":"MBS","text":"<p>A mildly better shell for ComputerCraft</p>"},{"location":"faq/rom/#hopperlua","title":"hopper.lua","text":"<p>Move items from A to B without any hassle, acts like a commandline hopper.</p>"},{"location":"faq/rom/#custom-shell-commands","title":"Custom shell commands","text":"<ul> <li><code>touch [file]</code> - Creates a file</li> <li><code>github limits [key|guest]</code> - View the GitHub limits as a guest or on a specific key</li> </ul>"},{"location":"faq/rom/#specific-to-turtles","title":"Specific to turtles","text":"<ul> <li><code>dig</code> - digs in front of the turtle</li> <li><code>drop [slot]</code> - Drops an item in the selected or specified slot</li> <li><code>forward</code> - Moves the turtle forward</li> <li><code>left</code> - Rotates the turtle to the left</li> <li><code>right</code> - Rotates the turtle to the right</li> <li><code>place</code> - Places the item in the selected or specified slot</li> <li><code>select</code> - Selects the specified slot</li> </ul>"},{"location":"faq/supporter/","title":"Being a Supporter","text":"<p>You can donate by clicking the \"Support Us!\" button on our website and agreeing to the terms. You will be sent to a Stripe checkout page and your supporter perks will be given to you automatically. </p> <p>If you havent received your supporter perks within 30 minutes, please contact the staff team.</p>"},{"location":"faq/supporter/#perks","title":"Perks","text":"<p>You will receive a colored prefix to indicate your supporter tier.</p> <p></p> <p>You can run /fly in the lobby, and use /hat and /sleep everywhere</p> <p>Please note that more supporter perks are on the way.</p>"},{"location":"faq/supporter/#commands","title":"Commands","text":"<p>You can use the following commands to customise your Supporter status:</p> Command Description <code>/supporter optin</code> Shows your prefix <code>/supporter optout</code> Hides your prefix <code>/supporter tier &lt;1-3&gt;</code> Changes the prefix to reflect a different tier equal to your current tier or under your current tier."},{"location":"mods/embedded-computer/","title":"Embedded Computer","text":"<p>The Embedded Computer mod adds the following blocks - Embedded Computer - Secure Computer</p> <p>The Embedded Computer allows you to have a computer that has an unreadable drive.</p> <p>The Secure Computer is an Embedded Computer with a terminal.</p>"},{"location":"mods/embedded-computer/#loading-data-onto-the-embedded-computer","title":"Loading data onto the Embedded Computer","text":"<p>You can load data onto your Embedded Computer by placing a disk drive next to it with a startup.lua file in it, that startup.lua file should have code that copies data to the Embedded Computer itself.</p> <p>We suggest disabling disk startup and locking your embedded computer when your code starts in order to prevent malicious code from executing.</p>"},{"location":"mods/embedded-computer/#api","title":"API","text":"<p>Every embedded computer has the following functions available:</p> <p><code>embedded.setPassword(string pass)</code> - old, aliases to security.lock. prior to 1.1.0 / 0.4.0 it was equivalent to security.lockInsecure</p> <p><code>security.lock(string pass)</code> - Adds a lock to the computer, uses SHA256 hashed many times then finally hashed with SHA512 several times. do NOT manually write to .LOCKED_HASHED if you want your stuff to work.</p> <p><code>security.lockHashed(string pass, string algo)</code> - like security.lock but you specify the algorithm. supports the following:</p> <ul> <li><code>sha256</code> (recommended)</li> <li><code>murmur3</code></li> <li><code>adler32</code></li> <li><code>siphash24</code></li> </ul>"},{"location":"mods/embedded-computer/#security-hash-functions","title":"<code>security</code> hash functions","text":"<p><code>security.hashStrSHA512(string)</code> <code>security.hashStrSHA256(string)</code> <code>security.hashStrMurmur3(string)</code> <code>security.hashStrAdler32(string)</code> <code>security.hashStrSipHash24(string)</code></p>"},{"location":"mods/embedded-computer/#embedded-and-secure-computers-peripheral-api","title":"Embedded and Secure Computers' Peripheral API","text":"<p><code>embeddedComputer.isOn()</code> <code>embeddedComputer.getId()</code> <code>embeddedComputer.reboot()</code> <code>embeddedComputer.format()</code> - requires the computer to be unlocked to use. both the secure and insecure locks need to be removed <code>embeddedComputer.unlockPlainText(string password)</code> - removes the insecure lock <code>embeddedComputer.unlockHashed(string pass, string algo)</code> - removes the hashed lock, same args as security.lockHashed <code>embeddedComputer.unlock(string pass)</code> - alias to unlockHashed with SHA256. prior to 1.1.0 / 0.4.0 it was equivalent to embeddedComputer.unlockPlainText</p>"},{"location":"mods/embedded-computer/#hard-drive-api","title":"Hard drive API","text":"<p>Please note, hard drives are made uncraftable by the server.</p> <p><code>hardDrive.mount(location)</code> - mounts the hard drive to any location on computer <code>hardDrive.unmount(location)</code> - unmounts the hard drive from this location</p>"},{"location":"mods/sc-goodies/","title":"sc-goodies","text":"<p>sc-goodies is a Fabric 1.20 content mod for the SwitchCraft server. It contains a variety of features specifically designed for SwitchCraft, many of which were inspired by previous 1.12 mods on SwitchCraft 2 such as cpw's ironchest, ChickenBones'  EnderStorage, and Vazkii's Quark. It has been ported to Fabric 1.21 for this server</p>"},{"location":"mods/sc-goodies/#useful-links","title":"Useful links","text":"<ul> <li>sc-goodies on GitHub</li> </ul>"},{"location":"mods/sc-goodies/#iron-storage","title":"Iron Storage","text":"<p>Higher-capacity variants of chests, barrels, and shulker boxes are added to the game:</p> <ul> <li>      Iron - 54 slots (9x6)   </li> <li>      Gold - 81 slots (9x9)   </li> <li>      Diamond - 108 slots (12x9)   </li> </ul> <p>Upgrades between variants can be crafted as well. For example, an iron chest can be upgraded to a gold chest by crafting an Iron to Gold Storage Upgrade, and shift+right-clicking the chest with it. The upgrades work for chests, barrels, and shulker boxes.</p> <ul> <li> Vanilla to Iron Storage Upgrade</li> <li> Iron to Gold Storage Upgrade</li> <li> Iron to Diamond Storage Upgrade</li> <li> Gold to Diamond Storage Upgrade</li> </ul> <p>Iron Chests do not become double chests - they are always single chests. Otherwise, these upgraded storage variants  behave identically to their vanilla counterparts. Hoppers and comparators can be used, shulker boxes can be dyed, and all can be wrapped as ComputerCraft peripherals.</p>"},{"location":"mods/sc-goodies/#barrel-hammer","title":"Barrel Hammer","text":"<p>Chests can be converted to barrels (and vice-versa) by shift+right-clicking them with a barrel hammer. This makes it easy to convert storage types while still keeping all items inside. The Barrel Hammer has a durability of 64 and can be  repaired with an iron ingot.</p>"},{"location":"mods/sc-goodies/#ender-storage","title":"Ender Storage","text":"<p>Ender Storage allows players to store their items in a special chest that features a changeable color coded frequency.  Any chest with the same frequency will share inventory, enabling item transfer over any distance and even across  dimensions. The frequency can be changed by right-clicking the three slots on top of the chest with a dye. As there are 16 colors, there are 4096 possible frequencies.</p> <p>You can also change the frequencies and personal status of an Ender Storage with crafting recipes.</p>"},{"location":"mods/sc-goodies/#personal-frequencies","title":"Personal frequencies","text":"<p>If a player right-clicks the handle of the Ender Storage with a Diamond, it becomes a Personal Ender Storage chest. The contents of this chest are unique to the player who placed the diamond, and only that  player can change its frequency. The diamond can be recovered by shift+right-clicking the chest with an empty hand.</p> <p>For security reasons, the frequency of a Personal Ender Storage chest cannot be changed by ComputerCraft by default. To allow this behavior, right-click the handle of the chest with an Emerald. This will  enable ComputerCraft to change the frequency of the chest.</p> <p>{: .warning } If you use an emerald on a Personal Ender Storage chest, any player with physical access to the chest will be able to access all of your private frequencies. Take care with who you give Personal Ender Storage chests to, and who you trust in your claims.</p> <p>{: .note } Public (non-personal) Ender Storage chests do not need an emerald to be changed by ComputerCraft. </p>"},{"location":"mods/sc-goodies/#crafting-recipes","title":"Crafting recipes","text":"<p>When placing any Ender Storage in a crafting grid, you can change its frequency and personal status:</p> <ul> <li>Place three dyes in the top row of a crafting grid, and the Ender Storage in any slot, to change the frequency.</li> <li>Place a diamond in any slot to make the chest personal. The owner will be the player performing the crafting   operation, so if the player isn't available for some reason (e.g. automated crafting in some conditions), this recipe    will not work. The diamond will not be consumed.</li> <li>Place an emerald in any slot to make the chest allow ComputerCraft to change its frequency. This also implies the   chest is personal. The emerald will not be consumed.</li> </ul> <p>All three of these can be combined in a single crafting operation.</p> <p></p>"},{"location":"mods/sc-goodies/#peripheral-api-ender-storage","title":"Peripheral API - Ender Storage","text":"<p>An Ender Storage Chest can be wrapped as a peripheral with the name <code>ender_storage</code>, e.g.:</p> <pre><code>local enderStorage = peripheral.wrap(\"ender_storage\")\n</code></pre>"},{"location":"mods/sc-goodies/#enderstoragegetfrequency-number-number-number","title":"<code>enderStorage.getFrequency(): number, number, number</code>","text":"<p>Returns the current frequency of the chest. The numbers returned are equivalent to the ComputerCraft  <code>colors</code> API.</p>"},{"location":"mods/sc-goodies/#enderstoragegetowner-string-string","title":"<code>enderStorage.getOwner(): string, string</code>","text":"<p>If the chest is a Personal Ender Storage chest, returns the UUID of the player who owns the chest, and their last-known username. If the chest is not a Personal Ender Storage chest, returns <code>nil, nil</code>.</p>"},{"location":"mods/sc-goodies/#enderstorageispersonal-boolean","title":"<code>enderStorage.isPersonal(): boolean</code>","text":"<p>Returns <code>true</code> if the chest is a Personal Ender Storage chest, <code>false</code> otherwise.</p>"},{"location":"mods/sc-goodies/#enderstoragearecomputerchangesenabled-boolean","title":"<code>enderStorage.areComputerChangesEnabled(): boolean</code>","text":"<p>Returns <code>true</code> if the chest allows ComputerCraft to change its frequency, <code>false</code> otherwise. This will always be <code>true</code> for non-personal Ender Storage chests. For Personal Ender Storage chests, this will be <code>true</code> if an emerald has been  used on the chest's handle.</p>"},{"location":"mods/sc-goodies/#enderstoragesetfrequencyleft-number-middle-number-right-number","title":"<code>enderStorage.setFrequency(left: number, middle: number, right: number)</code>","text":"<p>Sets the frequency of the chest. The numbers passed are equivalent to the ComputerCraft  <code>colors</code> API. For example, to set the frequency to white, white, white:</p> <pre><code>enderStorage.setFrequency(colors.white, colors.white, colors.white)\n</code></pre>"},{"location":"mods/sc-goodies/#enderstoragegetname-string","title":"<code>enderStorage.getName(): string</code>","text":"<p>Returns the custom name of the chest's frequency, if it has one, or <code>nil</code> otherwise.</p>"},{"location":"mods/sc-goodies/#enderstoragegetdescription-string","title":"<code>enderStorage.getDescription(): string</code>","text":"<p>Returns the custom description of the chest's frequency, if it has one, or <code>nil</code> otherwise.</p>"},{"location":"mods/sc-goodies/#hover-boots","title":"Hover Boots","text":"<p>Hover Boots allow players to jump higher, walk up one-block high walls, and reduce fall damage. They can be equipped in the \"shoes\" Trinket slot.</p> <p>Hover Boots have no durability, and can be dyed by crafting them with a dye.</p>"},{"location":"mods/sc-goodies/#item-magnet","title":"Item Magnet","text":"<p>The Item Magnet attracts nearby items to the player. It can be equipped in the \"gloves\" Trinket slot. The Item Magnet will disable itself if there is another player nearby with an active Item Magnet, or if there is an Item Frame with an Item Magnet in it nearby. It can also be disabled by pressing the Toggle Item Magnet hotkey (M by default).</p>"},{"location":"mods/sc-goodies/#range","title":"Range","text":"<p>By default, the magnet attracts items within a 3 block radius. This can be upgraded by crafting the Item Magnet with a Nether Star and a Netherite Ingot.  Upgrades can be applied multiple times, increasing the range by 1 block each time, up to a maximum of 6 blocks.</p> <p>The range for disabling the magnet when another player with an active magnet is the range of the magnet plus 2 blocks.</p>"},{"location":"mods/sc-goodies/#disabling-with-an-item-frame","title":"Disabling with an Item Frame","text":"<p>You can disable nearby players' Item Magnets by placing an Item Magnet in an Item Frame. It will disable nearby magnets even if the magnet in the frame itself is disabled (with M).</p>"},{"location":"mods/sc-goodies/#concrete-and-slabs-and-stairs","title":"Concrete and Slabs and Stairs","text":"<p>Concrete Slabs and Stairs are available in all 16 colors. They are crafted with the same recipe as the vanilla slabs and stairs.</p> <p>Additionally, walking speed on any type of concrete (blocks, slabs, stairs) is 25% faster.</p>"},{"location":"mods/sc-goodies/#more-slabs-and-stairs","title":"More Slabs and Stairs","text":"<p>Amethyst Slabs and Stairs are also available. They are crafted with the same recipe as the vanilla slabs and stairs.</p>"},{"location":"mods/sc-goodies/#stair-wrench","title":"Stair Wrench","text":"<p>The Stair Wrench is a tool that can be used to rotate stairs. Right-clicking a stair block with the wrench will change the state of the stairs. Shift-right-clicking will change the 'mode' of the wrench, according to the following modes:</p> <ul> <li>Facing (North, East, South, West)</li> <li>Half (Top, Bottom)</li> <li>Shape (Straight, Inner Left, Inner Right, Outer Left, Outer Right)</li> </ul> <p>The mode is saved to each individual wrench and is displayed in the item's tooltip. A turtle can make use of a wrench by selecting it and using <code>turtle.place()</code>.</p>"},{"location":"mods/sc-goodies/#trees","title":"Trees","text":"<p>Three new tree types have been added to the game: Sakura Trees, Maple Trees, and Peppy Trees. They currently do not generate naturally but their saplings can be found in loot chests.</p> Sakura Tree Maple Tree Peppy Tree"},{"location":"mods/sc-goodies/#renewable-shulkers","title":"Renewable Shulkers","text":"<p>Endermites will rarely bury into Purpur Blocks, similar to how Silverfish bury into stone. When they do, they fuse with  the block, forming a Shulker.</p>"},{"location":"mods/sc-goodies/#dragon-scale","title":"Dragon Scale","text":"<p>When an Ender Dragon is killed, it will drop a Dragon Scale. The scale can be combined with an Elytra in a crafting  table to create a new Elytra. The old Elytra stays behind untouched, therefore making Elytra cloneable.</p>"},{"location":"mods/sc-goodies/#dyeable-elytra","title":"Dyeable Elytra","text":"<p>The Elytra can be dyed with any of the 16 dyes by crafting it with the dye. The dye will be consumed in the process. The original vanilla Elytra can be restored by cleaning it in a cauldron of water.</p>"},{"location":"mods/sc-goodies/#special-elytra","title":"Special Elytra","text":"<p>Special dyed variants of the Elytra are also available, and can be crafted with the following recipes:</p> Item Recipe (shapeless)"},{"location":"mods/sc-goodies/#soft-toy-sharks","title":"Soft Toy Sharks","text":"<p>Soft Toy Sharks, also known as BL\u00c5HAJ, are available in all 16 dye colors. They're cuddly to hold.</p> <p>A special variant of the Soft Toy Shark is also available.</p>"},{"location":"mods/sc-goodies/#ancient-tomes","title":"Ancient Tomes","text":"<p>Ancient Tomes are special enchantment books that can an item one level beyond the maximum vanilla level. They are found in loot chests in Dungeons, Stronghold Libraries, Bastion Remnants, and Woodland Mansions.</p> <p>Ancient Tomes are available for most (but not all) enchantments: - Feather Falling (max. V) - Swift Sneak (max. IV) - Thorns (max. IV) - Sharpness (max. VI) - Smite (max. VI) - Bane of Arthropods (max. VI) - Knockback (max. III) - Fire Aspect (max. III) - Looting (max. IV) - Sweeping Edge (max. IV) - Efficiency (max. VI) - Unbreaking (max. IV) - Fortune (max. IV) - Power (max. VI) - Punch (max. III) - Luck of the Sea (max. IV) - Lure (max. IV) - Loyalty (max. IV) - Riptide (max. IV) - Impaling (max. VI) - Piercing (max. V)</p>"},{"location":"mods/sc-goodies/#glass-item-frame","title":"Glass Item Frame","text":"<p>Glass Item Frames are a see-through variant of the vanilla Item Frame. They can be crafted by surrounding an Item Frame with Glass Panes. Glow Glass Item Frames can be crafted by combining a Glass Item Frame with a Glow Ink Sac.</p> <p>Glass Item Frames also have special behavior for banners and shields placed inside them.</p>"},{"location":"mods/sc-goodies/#extra-food","title":"Extra Food","text":"Item Description          A bottomless bag of popcorn.          ( currently unobtainable )        Yummy salami A delicious treat! A delicious treat! A delicious treat! Vanilla, Chocolate, and Sweet Berry. A refreshing treat! A delicious treat! An earthy treat! A suspiciously familiar sundae."},{"location":"mods/sc-peripherals/","title":"sc-peripherals","text":""},{"location":"mods/sc-peripherals/#sc-peripherals","title":"sc-peripherals","text":"<p>{: .note} Quick link to .3dm to .3dj converter: https://3dj.lem.sh/</p> <p>sc-peripherals is a Fabric 1.20  CC: Tweaked peripheral mod for the SwitchCraft server. It adds a 3D printer in the style of OpenComputers, and a Wide Format Printer that prints  custom posters to display in item frames.</p> <ul> <li><code>.3dj</code> models are printed in-game by running <code>print3d &lt;filename.3dj&gt;</code> on a computer with a 3D Printer peripheral.   Legacy OC 3D models can be converted using the .3dm to .3dj converter.</li> <li><code>.2dj</code>/<code>.2dja</code> images are printed in-game by running <code>poster &lt;filename.2dj(a)&gt;</code> on a computer with a Wide Format Printer   peripheral.</li> </ul> <p></p>"},{"location":"mods/sc-peripherals/#useful-links","title":"Useful links","text":""},{"location":"mods/sc-peripherals/#sc-peripherals_1","title":"sc-peripherals","text":"<ul> <li>sc-peripherals on GitHub</li> </ul>"},{"location":"mods/sc-peripherals/#3d-prints","title":"3D Prints","text":"<ul> <li>OpenComputers .3dm to .3dj converter (Official)</li> <li>Blockbench plugin for exporting to .3dj (by Sammy (1Turtle))</li> <li>Online Blockbench to .3dj converter (by znepb)</li> <li>SwitchCraft 3D Prints - Example 3D prints in the style of BiblioCraft</li> </ul>"},{"location":"mods/sc-peripherals/#posters","title":"Posters","text":"<ul> <li>Reference image to .2dj converter in Python (Official)</li> <li>Image to .2dj/.2dja converter (by ShreksHellraiser (MasonGulu))</li> <li>Image to .2dj converter written in Rust (by GPLv3 (PatriikPlays))</li> </ul>"},{"location":"mods/sc-peripherals/#3d-printer","title":"3D Printer","text":"<p>The 3D Printer is a peripheral that can be used to print 3D models in-game. It takes ink cartridges and chamelium to print models, which can be printed with the <code>print3d</code> program for files in the <code>.3dj</code> format.</p>"},{"location":"mods/sc-peripherals/#differences-from-opencomputers","title":"Differences from OpenComputers","text":"<ul> <li>The 3D Printer and Ink Cartridge are simpler to craft<ul> <li>The Ink Cartridge recipe is crafted as a filled cartridge to begin with, but a refill recipe is still provided</li> </ul> </li> <li>3D Printers do not require the use of energy</li> <li>3D Printers have externally-visible progress bars for chamelium and ink levels</li> <li>First-class ComputerCraft peripheral API support</li> <li><code>print3d</code> program included in the ROM by default via a data pack in the mod<ul> <li>Printing can be safely terminated by the user, and it will automatically stop after the current item is finished</li> <li><code>print3d stop</code> command to stop a printer via the CLI</li> <li>Uses 3dj format instead of 3dm (converter here: https://3dj.lem.sh/)</li> </ul> </li> <li>Default maximum shape count (configurable) for each state of a print raised from 24 to 128</li> <li>The default maximum light level in printed models is now 7 instead of 8 - this is now equivalent to a redstone torch<ul> <li>Prints can still be crafted with 8 pieces of glowstone dust to reach maximum brightness level</li> </ul> </li> <li>3D prints are waterloggable</li> <li>The included \"white\" texture name changed from <code>opencomputers:blocks/white</code> to <code>sc-peripherals:block/white</code></li> <li>Print models are more efficiently cached, so chunks with lots of identical prints will only bake the print model once<ul> <li>Note that this is not the be-all and end-all of performance, there may still be a lot of vertex data to upload to   the chunk</li> </ul> </li> <li>Prints can be crafted with beacon base blocks, honey blocks, and glowstone dust or blocks for additional features.</li> </ul>"},{"location":"mods/sc-peripherals/#3dj-format","title":".3dj format","text":"<p>The 3dj format was created as a more versatile alternative for processing and storing 3D models compared to the old OpenComputers 3dm format. It uses JSON instead of Lua tables, so it is easier to work with programmatically.</p> <p>There is an online .3dm to .3dj converter here: https://3dj.lem.sh/</p>"},{"location":"mods/sc-peripherals/#example","title":"Example","text":"<p>All arguments except for <code>shapesOff</code>, <code>shapesOn</code>, and <code>bounds</code> are optional.</p> <pre><code>{\n  \"label\": \"...\",\n  \"tooltip\": \"...\",\n  \"isButton\": false,\n  \"collideWhenOn\": true,\n  \"collideWhenOff\": true,\n  \"lightLevel\": 0,\n  \"redstoneLevel\": 0,\n  \"shapesOff\": [\n    { \"bounds\": [0, 0, 0, 16, 16, 16], \"texture\": \"\", \"tint\": \"FFFFFF\" },\n    { \"bounds\": [0, 0, 0, 16, 16, 16], \"texture\": \"\", \"tint\": \"FFFFFF\" },\n    { \"bounds\": [0, 0, 0, 16, 16, 16], \"texture\": \"\", \"tint\": \"FFFFFF\" }\n  ],\n  \"shapesOn\": [\n    { \"bounds\": [0, 0, 0, 16, 16, 16], \"texture\": \"\", \"tint\": \"FFFFFF\" }  \n  ]\n}\n</code></pre>"},{"location":"mods/sc-peripherals/#fields","title":"Fields","text":"<ul> <li><code>label</code>: (optional, string) The name of the 3D print, maximum 48 characters.</li> <li><code>tooltip</code>: (optional, string) The tooltip of the 3D print in the inventory, maximum 256 characters.</li> <li><code>isButton</code>: (optional, boolean) Whether the 3D print acts as a button when right-clicked. If true, the print will   automatically switch to the 'off' state after 20 ticks when right-clicked. If false, right-clicking will toggle the   state.</li> <li><code>collideWhenOff</code>: (optional, boolean) Whether the 3D print is collidable when in the 'off' state.</li> <li><code>collideWhenOn</code>: (optional, boolean) Whether the 3D print is collidable when in the 'on' state.</li> <li><code>lightLevel</code>: (optional, number) The light level of the 3D print. Must be between 0 or 15, but values above 7 will   be clamped to 7 unless the print is later crafted with glowstone dust.</li> <li><code>lightWhenOff</code>: (optional, boolean) Whether the 3D print emits light when in the 'off' state.</li> <li><code>lightWhenOn</code>: (optional, boolean) Whether the 3D print emits light when in the 'on' state.</li> <li><code>redstoneLevel</code>: (optional, number) The redstone level of the 3D print. Must be between 0 or 15.</li> <li><code>seatPos</code>: (optional, array of numbers) The position of the seat on the 3D print. If not null or undefined, must be a   array containing three numbers between 0.1 and 0.9, e.g. <code>[0.5, 0.5, 0.5]</code>, where 0.5 is the center of the block. When    not null or undefined, the print will be a seat that can be sat on by right-clicking.</li> <li><code>shapesOff</code>: (required, array of objects) The shapes of the 3D print when in the 'off' state. Each object in the array   must have a <code>bounds</code> property with the bounds of the shape, an optional <code>texture</code> property with the texture of the shape,   and an optional <code>tint</code> property with the tint of the shape, which may be a number or a hex string (<code>RRGGBB</code>).</li> <li><code>bounds</code>: (required, array of numbers) The bounds of the shape, in the format     <code>[minX, minY, minZ, maxX, maxY, maxZ]</code>. Numbers must be between 0 and 16 inclusive (16 is the edge of the block).</li> <li><code>texture</code>: (optional, string) The texture of the shape, including the namespace. For example,     <code>minecraft:block/stone</code> or <code>sc-peripherals:block/white</code>. Use the texture analyzer item to find the texture of a     block in the world. The <code>sc-peripherals:block/white</code> texture is available as a blank texture for tinting. If     texture is not specified or empty string resulting shape is not rendered.</li> <li><code>tint</code>: (optional, number or string) The tint of the shape, as a hex string in the format <code>RRGGBB</code>, or a single     decimal value.</li> <li><code>shapesOn</code>: (required, array of objects) Same as <code>shapesOff</code>, but for the 'on' state. To disallow state changes   and have no 'on' state, pass an empty array.</li> </ul>"},{"location":"mods/sc-peripherals/#differences-from-3dm","title":"Differences from 3dm","text":"<ul> <li>Uses JSON instead of Lua tables</li> <li><code>emitRedstone</code> renamed to <code>redstoneLevel</code></li> <li><code>collidable</code> array is now two separate <code>collideWhenOff</code>, <code>collideWhenOn</code> boolean fields (default to true)</li> <li><code>buttonMode</code> renamed to <code>isButton</code></li> <li><code>shapes</code> array has been separated into <code>shapesOff</code>, <code>shapesOn</code><ul> <li><code>state</code> field removed</li> <li><code>tint</code> in a shape may now be a number or a hex string (<code>RRGGBB</code>)</li> </ul> </li> </ul>"},{"location":"mods/sc-peripherals/#wide-format-printer","title":"Wide Format Printer","text":"<p>The Wide Format Printer is a peripheral that can print posters, which are  map-like items that can be displayed in item frames with custom images. A poster is 128x128 pixels and has a  customizable 64-color palette (including one transparent color). Like 3D prints, posters can have a custom label and  tooltip.</p> <p>The Wide Format Printer requires ink cartridges and paper to print posters.</p>"},{"location":"mods/sc-peripherals/#2dj-format","title":".2dj format","text":"<p>A 2dj file is a JSON file with the following structure:</p> <pre><code>{\n  \"label\":   \"...\",\n  \"tooltip\": \"...\", \n  \"palette\": [],\n  \"pixels\":  [],\n  \"width\":   128,\n  \"height\":  128 \n}\n</code></pre>"},{"location":"mods/sc-peripherals/#fields_1","title":"Fields","text":"<p><code>label</code>: (optional) The name of the poster, max 48 characters <code>tooltip</code>: (optional) The tooltip of the poster in the inventory, max 256 characters <code>pallete</code>: Up to 63 colors encoded as 0xRRGGBB integers, the transparent index 0 should not be included  <code>pixels</code>: 16384 (128*128) array of palette indices. 0 is transparent, 1 is the first palette color, etc. <code>width</code>: Width of the poster in pixels, not currently used <code>height</code>: Height of the poster in pixels, not currently used</p> <p>Poster palettes are limited to 63 colors plus one transparent color. The first color in the palette (index 0) is fully transparent, and the remaining 63 colors (index 1 onward) are fully opaque but customizable. By default, the posters use the same palette as vanilla maps, e.g. 0 is NONE, 1 is GRASS,  2 is SAND, etc.</p> <p>Example .2dj file</p>"},{"location":"mods/sc-peripherals/#2dja-format","title":".2dja format","text":"<p>A 2dja file is primarily a collection of 2dj files, encoded with the following structure:</p> <pre><code>{\n  \"title\": \"...\",\n  \"width\": 1,     \n  \"height\": 3,    \n  \"pages\": [      \n    {  },\n    {  },\n    {  }\n  ]\n}\n</code></pre>"},{"location":"mods/sc-peripherals/#fields_2","title":"Fields","text":"<p><code>title</code>: (optional) The name of the collection of posters, not currently used <code>width</code>: (optional) Count of posters in a row, not currently used <code>height</code>: (optional) Count of posters in a column, not currently used <code>pages</code>: Array of 2dj files, length should be width * height if specified</p>"},{"location":"mods/sc-peripherals/#peripheral-api-3d-printer","title":"Peripheral API - 3D Printer","text":"<p>A 3D Printer can be wrapped as a peripheral with the name <code>3d_printer</code>, e.g.:</p> <pre><code>local printer = peripheral.wrap(\"3d_printer\")\n</code></pre> <p>The 3D Printer has a local buffer of what to print, referred to here as the \"model\". A model has two shape sets (collections of \"shapes\", which are cuboids with a texture and tint), a set for the \"on\" state and a set for the \"off\" state. After adding the shapes to the model  with <code>printer.addShape(...)</code>  or <code>printer.addShapes({ ... })</code> (recommended), it can be printed by committing it  with <code>printer.commit(count)</code>. </p> <p>The printer will remember the model, so subsequent copies can be printed by committing again, or a new model can be printed by resetting the printer with <code>printer.reset()</code>.</p> <p>The two shape sets (off and on) have a limit of 128 shapes each, for a total of 256 shapes per model. The default state  is \"off\". </p> <p>{: .note} For a practical example of the 3D Printer API, refer to the built-in  print3d program.</p>"},{"location":"mods/sc-peripherals/#printeraddshapeminxnumber-minynumber-minznumber-maxxnumber-maxynumber-maxznumber-texturestring-stateboolean-tintnumber","title":"<code>printer.addShape(minX:number, minY:number, minZ:number, maxX:number, maxY:number, maxZ:number[, texture:string[, state:boolean[, tint:number]]])</code>","text":"<p>{: .warning} Using <code>printer.addShapes</code> is preferred as it is significantly faster. Each individual <code>addShape</code> call will take at least 1 tick.</p> <p>Adds a single shape (cuboid) to the model. The shape dimensions must be between 0 and 16 (inclusive) and the shape must  not have a volume of 0. A maximum of 128 shapes can be added to a shape set.</p>"},{"location":"mods/sc-peripherals/#parameters","title":"Parameters","text":"Param Type Description <code>minX</code> <code>number</code> The minimum X coordinate of this shape, between 0 and 16 (inclusive) <code>minY</code> <code>number</code> The minimum Y coordinate of this shape, between 0 and 16 (inclusive) <code>minZ</code> <code>number</code> The minimum Z coordinate of this shape, between 0 and 16 (inclusive) <code>maxX</code> <code>number</code> The maximum X coordinate of this shape, between 0 and 16 (inclusive) <code>maxY</code> <code>number</code> The maximum Y coordinate of this shape, between 0 and 16 (inclusive) <code>maxZ</code> <code>number</code> The maximum Z coordinate of this shape, between 0 and 16 (inclusive) <code>texture</code> <code>string</code> (optional) The texture identifier of this shape. Must be in the format <code>modid:path/texture</code>, e.g. <code>minecraft:block/sandstone</code>. You can right-click on any block with a Texture Analyzer to find the name of its textures. <code>state</code> <code>boolean</code> (optional) The shape set to put this shape in, <code>false</code> for the \"off\" state and <code>true</code> for the \"on\" state. Defaults to <code>false</code>. <code>tint</code> <code>number</code> (optional) The color to tint this shape. Must be of the form <code>0xRRGGBB</code>. Defaults to <code>0xFFFFFF</code> (white)."},{"location":"mods/sc-peripherals/#printeraddshapesshapestable","title":"<code>printer.addShapes(shapes:table)</code>","text":"<p>Adds multiple shapes to the model. The shapes may be added to either shape set (or both in one batch) by specifying the <code>state</code> parameter. A maximum of 128 shapes can be added to a shape set, and 256 shapes to the model as a whole.</p> <p>A shape passed to this function is a mixed table, where the first 6 elements are numbers are the bounds of the shape, and <code>texture</code>, <code>state</code> and <code>tint</code> may be provided as named keys.</p> <p>An example shapes table:</p> <pre><code>local shapes = {\n  -- Off state\n  { 0, 0, 0, 16, 8,  16, texture = \"minecraft:block/stone\",     state = false, tint = 0xFF0000 },\n  { 0, 8, 0, 16, 16, 16, texture = \"minecraft:block/sandstone\", state = false, tint = 0xFFFFFF },\n  -- On state\n  { 0, 0, 0, 16, 8,  16, texture = \"minecraft:block/stone\",     state = true,  tint = 0x0000FF },\n  { 0, 8, 0, 16, 16, 16, texture = \"minecraft:block/sandstone\", state = true,  tint = 0xFFFFFF },\n}\n</code></pre>"},{"location":"mods/sc-peripherals/#shape-table-parameters","title":"Shape table parameters","text":"Param Type Description 1 <code>number</code> The minimum X coordinate of this shape, between 0 and 16 (inclusive) 2 <code>number</code> The minimum Y coordinate of this shape, between 0 and 16 (inclusive) 3 <code>number</code> The minimum Z coordinate of this shape, between 0 and 16 (inclusive) 4 <code>number</code> The maximum X coordinate of this shape, between 0 and 16 (inclusive) 5 <code>number</code> The maximum Y coordinate of this shape, between 0 and 16 (inclusive) 6 <code>number</code> The maximum Z coordinate of this shape, between 0 and 16 (inclusive) <code>texture</code> <code>string</code> (optional) The texture identifier of this shape. Must be in the format <code>modid:path/texture</code>, e.g. <code>minecraft:block/sandstone</code>. You can right-click on any block with a Texture Analyzer to find the name of its textures. <code>state</code> <code>boolean</code> (optional) The shape set to put this shape in, <code>false</code> for the \"off\" state and <code>true</code> for the \"on\" state. Defaults to <code>false</code>. <code>tint</code> <code>number</code> (optional) The color to tint this shape. Must be of the form <code>0xRRGGBB</code>. Defaults to <code>0xFFFFFF</code> (white)."},{"location":"mods/sc-peripherals/#printercommitcountnumber-boolean","title":"<code>printer.commit(count:number): boolean</code>","text":"<p>Asynchronously begins printing the specified number of prints. </p> <p><code>count</code> must be greater than 0. Once a job has been committed, the printer will continue trying to print that number of items even if it runs out of ink or chamelium - it will simply wait for more resources to be added. If there is a different print in the printer's output slot, the job will still be committed, but printing will not begin until the other item is removed.</p>"},{"location":"mods/sc-peripherals/#printergetbuttonmode-boolean","title":"<code>printer.getButtonMode(): boolean</code>","text":"<p>Returns whether this print model is in button mode. This can be changed with  <code>printer.setButtonMode()</code>.</p>"},{"location":"mods/sc-peripherals/#printergetchameliumlevel-number-number","title":"<code>printer.getChameliumLevel(): number, number</code>","text":"<p>Returns the amount of chamelium currently in the printer, and the maximum amount of chamelium the printer can store (currently 256000).</p>"},{"location":"mods/sc-peripherals/#printergetinklevel-number-number","title":"<code>printer.getInkLevel(): number, number</code>","text":"<p>Returns the amount of ink currently in the printer, and the maximum amount of ink the printer can store (currently 100000).</p>"},{"location":"mods/sc-peripherals/#printergetlabel-string","title":"<code>printer.getLabel(): string</code>","text":"<p>Returns the label of this print model (the name shown on the item). This can be changed with <code>printer.setLabel()</code>.</p>"},{"location":"mods/sc-peripherals/#printergetlightlevel-number","title":"<code>printer.getLightLevel(): number</code>","text":"<p>Returns the light level of this print model. On the model, this will be between 0 and 7 (inclusive). This can be changed with <code>printer.setLightLevel()</code>. Higher light levels can be achieved by crafting  the resulting print with glowstone dust.</p>"},{"location":"mods/sc-peripherals/#printergetmaxshapecount-number","title":"<code>printer.getMaxShapeCount(): number</code>","text":"<p>Returns the maximum shape count per shape set (128).</p>"},{"location":"mods/sc-peripherals/#printergetredstonelevel-number","title":"<code>printer.getRedstoneLevel(): number</code>","text":"<p>Returns the light level of this print model. This will be between 0 and 15 (inclusive). This can be changed with <code>printer.setRedstoneLevel()</code>.</p>"},{"location":"mods/sc-peripherals/#printergetshapecount-number-number","title":"<code>printer.getShapeCount(): number, number</code>","text":"<p>Returns the number of shapes for the \"off\" shape set and the \"on\" shape set, respectively.</p>"},{"location":"mods/sc-peripherals/#printergettooltip-string","title":"<code>printer.getTooltip(): string</code>","text":"<p>Returns the tooltip (description) of the print item.</p>"},{"location":"mods/sc-peripherals/#printeriscollidable-boolean-boolean","title":"<code>printer.isCollidable(): boolean, boolean</code>","text":"<p>Returns whether print model is collidable in the \"off\" state and \"on\" state respectively.</p>"},{"location":"mods/sc-peripherals/#printerreset","title":"<code>printer.reset()</code>","text":"<p>Resets the current print buffer to start a new shape. Does not stop any ongoing print jobs.</p>"},{"location":"mods/sc-peripherals/#printersetbuttonmodeisbuttonboolean","title":"<code>printer.setButtonMode(isButton:boolean)</code>","text":"<p>Sets whether the print model is in button mode.</p>"},{"location":"mods/sc-peripherals/#printersetcollidablecollidewhenoffboolean-collidewhenonboolean","title":"<code>printer.setCollidable(collideWhenOff:boolean, collideWhenOn:boolean)</code>","text":"<p>Sets whether the print model is collidable in the \"off\" state and \"on\" state respectively.</p>"},{"location":"mods/sc-peripherals/#printersetlabellabelstring","title":"<code>printer.setLabel([label:string])</code>","text":"<p>Sets the label (item name) of the print item.</p>"},{"location":"mods/sc-peripherals/#printersetlightlevellevelnumber","title":"<code>printer.setLightLevel(level:number)</code>","text":"<p>Sets the light level of the print model. This must be between 0 and 7 (inclusive). Higher light levels can be achieved  by crafting the resulting print with glowstone dust.</p>"},{"location":"mods/sc-peripherals/#printersetredstonelevellevelnumber","title":"<code>printer.setRedstoneLevel(level:number)</code>","text":"<p>Sets the redstone level of the print model. This must be between 0 and 15 (inclusive).</p>"},{"location":"mods/sc-peripherals/#printersetstatelightinglightwhenoffboolean-lightwhenonboolean","title":"<code>printer.setStateLighting(lightWhenOff:boolean, lightWhenOn:boolean)</code>","text":"<p>Sets whether the print model is emitting light in the \"off\" state and \"on\" state respectively.</p>"},{"location":"mods/sc-peripherals/#printergetseatpos-number-number-number","title":"<code>printer.getSeatPos(): number, number, number</code>","text":"<p>Returns the position of the seat on the print model. If the print model is not a seat, this will return <code>nil, nil, nil</code>.</p>"},{"location":"mods/sc-peripherals/#printersetseatposxnumber-ynumber-znumber","title":"<code>printer.setSeatPos(x:number, y:number, z:number)</code>","text":"<p>Sets the position of the seat on the print model. The positions must be between 0.1 and 0.9 for each axis, or <code>nil</code> to remove the seat.</p>"},{"location":"mods/sc-peripherals/#printersettooltiptooltipstring","title":"<code>printer.setTooltip([tooltip:string])</code>","text":"<p>Sets the tooltip (description) of the print item.</p>"},{"location":"mods/sc-peripherals/#printerstatus-string-numberboolean","title":"<code>printer.status(): string, number|boolean</code>","text":"<p>Returns the status and print progress of the printer.</p>"},{"location":"mods/sc-peripherals/#returned-parameters","title":"Returned parameters","text":"Param Type Description <code>status</code> <code>string</code> <ul><li><code>busy</code> - The printer is currently printing an item.</li><li><code>idle</code> - The printer is not currently printing anything.</li></ul> <code>progress</code> <code>number</code> or <code>boolean</code> If the printer is <code>busy</code>, then the progress of the current item in ticks, between 0 and 100 (5 seconds).If the printer is <code>idle</code>, then <code>true</code> if it is ready to print (output slot is not blocked) or <code>false</code> if not."},{"location":"mods/sc-peripherals/#printerstop","title":"<code>printer.stop()</code>","text":"<p>Requests the printer to stop the print job after the current item.</p>"},{"location":"mods/sc-peripherals/#3d_printer_state-event","title":"<code>3d_printer_state</code> event","text":"<p>The <code>3d_printer_state</code> event is emitted whenever a print job starts, stops, or the print model is changed.</p>"},{"location":"mods/sc-peripherals/#parameters_1","title":"Parameters","text":"Param Type Description <code>status</code> <code>string</code> The current print status, see <code>printer.status()</code> for possible values."},{"location":"mods/sc-peripherals/#3d_printer_complete-event","title":"<code>3d_printer_complete</code> event","text":"<p>The <code>3d_printer_complete</code> event is emitted when a print item has been printed, i.e. once for each <code>count</code> in a committed print job.</p>"},{"location":"mods/sc-peripherals/#parameters_2","title":"Parameters","text":"Param Type Description <code>remaining</code> <code>number</code> The number of items remaining in the print job."},{"location":"mods/sc-peripherals/#peripheral-api-wide-format-printer","title":"Peripheral API - Wide Format Printer","text":"<p>A Wide Format Printer can be wrapped as a peripheral with the name <code>poster_printer</code>, e.g.:</p> <pre><code>local posterPrinter = peripheral.wrap(\"poster_printer\")\n</code></pre> <p>The Wide Format Printer has a local buffer of what to print, referred to here as the \"poster\". A poster has a table of  palette colors (63 colors, as index 0 is always transparent) and a table of pixels (16384 entries, 128*128). After blitting pixels to the poster with  <code>posterPrinter.blitPixels(...)</code> and setting the palette with <code>posterPrinter.blitPalette(...)</code>, the poster can be printed with  <code>posterPrinter.commit(count)</code>.</p> <p>The printer will remember the poster data, so subsequent copies can be printed by committing again, or a new poster can be printed by resetting the printer with <code>posterPrinter.reset()</code>.</p> <p>{: .note } For a practical example of the Wide Format Printer API, refer to the built-in poster program.</p>"},{"location":"mods/sc-peripherals/#posterprintersetpixelxnumber-ynumber-colornumber","title":"<code>posterPrinter.setPixel(x:number, y:number, color:number)</code>","text":"<p>{: .warning }  Using <code>posterPrinter.blitPixels</code> is preferred as it is significantly faster. Each individual <code>setPixel</code> call will take at least 1 tick.</p> <p>Sets the color of a single pixel in the poster. The color refers to the palette index and must be between 0 and 63  (inclusive). Palette index 0 is always transparent. The pixel coordinates must be between 1 and 128 (inclusive).</p>"},{"location":"mods/sc-peripherals/#posterprinterblitpixelsxnumber-ynumber-pixelstable","title":"<code>posterPrinter.blitPixels(x:number, y:number, pixels:table)</code>","text":"<p>Sets multiple pixels in the poster. The pixels table must be a one-dimensional table of pixel colors, of maximum size 16384 (128 * 128). The pixel colors refer to the palette index and must be between 0 and 63 (inclusive). Palette index 0  is always transparent.</p> <p>Pixels will wrap onto the next row (starting at <code>x</code> = 1) if the table is larger than the remaining space in the row.  This means you can set the entire poster at once by calling <code>blitPixels(1, 1, pixels)</code>, where <code>pixels</code> is a table of  16384 entries.</p>"},{"location":"mods/sc-peripherals/#posterprintersetpalettecolorindexnumber-rednumber-greennumber-bluenumber","title":"<code>posterPrinter.setPaletteColor(index:number, red:number, green:number, blue:number)</code>","text":"<p>{: .warning} Using <code>posterPrinter.blitPalette</code> is preferred as it is significantly faster. Each individual <code>setPaletteColor</code> call will take at least 1 tick.</p> <p>Sets a single color in the poster palette. The palette index must be between 1 and 63 (inclusive). The color components must be between 0 and 255 (inclusive). Palette index 0 is always transparent, and cannot be changed.</p>"},{"location":"mods/sc-peripherals/#posterprinterblitpalettepalettetable","title":"<code>posterPrinter.blitPalette(palette:table)</code>","text":"<p>Sets the palette of the poster. The palette table must be a one-dimensional table of colors, of maximum size 63. The first entry in the table is index 1, as index 0 is always transparent. This means you can pass a one-indexed Lua table directly as a palette. A color is represented as a 24-bit integer, where the first 8 bits are the red component, the  next 8 bits are the green component, and the last 8 bits are the blue component. For example, <code>0xFF0000</code> is red,  <code>0x00FF00</code> is green, and <code>0x0000FF</code> is blue.</p> <p>Example:</p> <pre><code>posterPrinter.blitPalette({\n    0xFF0000, -- idx 1, Red\n    0x00FF00, -- idx 2, Green\n    0x0000FF, -- idx 3, Blue\n    -- ... up to 63 entries\n})\n</code></pre>"},{"location":"mods/sc-peripherals/#posterprintercommitcountnumber-boolean","title":"<code>posterPrinter.commit(count:number): boolean</code>","text":"<p>Asynchronously begins printing the specified number of posters.</p> <p><code>count</code> must be greater than 0. Once a job has been committed, the printer will continue trying to print that number of items even if it runs out of ink or paper - it will simply wait for more resources to be added. If there is a different poster in the printer's output slot, the job will still be committed, but printing will not begin until the other item is removed.</p>"},{"location":"mods/sc-peripherals/#posterprintergetinklevel-number-number","title":"<code>posterPrinter.getInkLevel(): number, number</code>","text":"<p>Returns the amount of ink currently in the printer, and the maximum amount of ink the printer can store (currently 100000).</p>"},{"location":"mods/sc-peripherals/#posterprintergetlabel-string","title":"<code>posterPrinter.getLabel(): string</code>","text":"<p>Returns the label of this poster item (the name shown on the item). This can be changed with <code>posterPrinter.setLabel()</code>.</p>"},{"location":"mods/sc-peripherals/#posterprintergettooltip-string","title":"<code>posterPrinter.getTooltip(): string</code>","text":"<p>Returns the tooltip (description) of the poster item.</p>"},{"location":"mods/sc-peripherals/#posterprinterreset","title":"<code>posterPrinter.reset()</code>","text":"<p>Resets the current print buffer to start a new poster. Does not stop any ongoing print jobs.</p>"},{"location":"mods/sc-peripherals/#posterprintersetlabellabelstring","title":"<code>posterPrinter.setLabel([label:string])</code>","text":"<p>Sets the label (item name) of the poster item.</p>"},{"location":"mods/sc-peripherals/#posterprintersettooltiptooltipstring","title":"<code>posterPrinter.setTooltip([tooltip:string])</code>","text":"<p>Sets the tooltip (description) of the poster item.</p>"},{"location":"mods/sc-peripherals/#posterprinterstatus-string-numberboolean","title":"<code>posterPrinter.status(): string, number|boolean</code>","text":"<p>Returns the status and print progress of the printer.</p>"},{"location":"mods/sc-peripherals/#returned-parameters_1","title":"Returned parameters","text":"Param Type Description <code>status</code> <code>string</code> <ul><li><code>busy</code> - The printer is currently printing an item.</li><li><code>idle</code> - The printer is not currently printing anything.</li></ul> <code>progress</code> <code>number</code> or <code>boolean</code> If the printer is <code>busy</code>, then the progress of the current item in ticks, between 0 and 100 (5 seconds).If the printer is <code>idle</code>, then <code>true</code> if it is ready to print (output slot is not blocked) or <code>false</code> if not."},{"location":"mods/sc-peripherals/#posterprinterstop","title":"<code>posterPrinter.stop()</code>","text":"<p>Requests the printer to stop the print job after the current item.</p>"},{"location":"mods/sc-peripherals/#poster_printer_state-event","title":"<code>poster_printer_state</code> event","text":"<p>The <code>poster_printer_state</code> event is emitted whenever a print job starts, stops, or the poster data is changed.</p>"},{"location":"mods/sc-peripherals/#parameters_3","title":"Parameters","text":"Param Type Description <code>status</code> <code>string</code> The current print status, see <code>posterPrinter.status()</code> for possible values."},{"location":"mods/sc-peripherals/#poster_printer_complete-event","title":"<code>poster_printer_complete</code> event","text":"<p>The <code>poster_printer_complete</code> event is emitted when a poster item has been printed, i.e. once for each <code>count</code> in a  committed print job.</p>"},{"location":"mods/sc-peripherals/#parameters_4","title":"Parameters","text":"Param Type Description <code>remaining</code> <code>number</code> The number of items remaining in the print job."},{"location":"replethora/","title":"Getting started with Re:Plethora","text":"<p>Re:Plethora is our in house fork of Plethora, with some added features, including:</p> <ul> <li>Villager Metadata</li> <li>Ability to prevent lasers from breaking blocks</li> <li>Bugfixes regarding the 2d canvas</li> </ul> <p>Most of this documentation is based on the original documentation for Plethora 1.12.2, licensed under MIT</p>"},{"location":"replethora/block-scanner/","title":"Block scanner","text":"<p>The block scanner provides a way to query information about surrounding blocks. Useful for discovering ores, or just snooping in on your neighbours.</p> <p>Module: <code>plethora:scanner</code> (view methods)</p> <p>Usable in:  </p> <ul> <li> <p>Manipulator</p> </li> <li> <p>Minecart computer</p> </li> <li> <p>Neural interface</p> </li> <li> <p>Pocket computer</p> </li> <li> <p>Turtle</p> </li> </ul> <p></p>"},{"location":"replethora/block-scanner/#basic-usage","title":"Basic usage","text":"<p>The easiest way to start using the block scanner is, well, with the .scan() method. This looks at every block in an 8 block radius (17x17x17 centred on the scanner) and returns some basic information about it. The easiest way to extract information out of this is just to loop over it:</p> <p><pre><code>local scanner = peripheral.wrap(--[[ whatever ]])\nfor _, block in pairs(scanner.scan()) do\n  print((\"The block at %d, %d, %d is %s\"):format(block.x, block.y, block.z, block.name))\nend\n</code></pre> If you\u2019re just looking for a couple of blocks though, it may be easier to index directly into the list. This is possible, though takes some thinking about. I\u2019ll save you the hassle though, and just provide some code:</p> <pre><code>local scanner_radius = 8\nlocal scanner_width = scanner_radius * 2 + 1\n\nlocal scanned = scanner.scan()\nlocal function scanned_at(x, y, z)\n  return scanned[scanner_width ^ 2 * (x + scanner_radius) + scanner_width * (y + scanner_radius) + (z + scanner_radius) + 1]\nend\nWhile it\u2019s useful to know what block something is, there may be times you want to query a little more information. Maybe find out the energy levels of every energy cell within range? This is where .getBlockMeta comes in. This takes some coordinate relative to the scanner and returns all the information it knows about it - just like you\u2019d called .getMetadata on the peripheral!\n\nlocal meta = scanner.getBlockMeta(0, 3, 0) -- Get information about whatever is 3 blocks above\nprint(textutils.serialise(meta))\n</code></pre>"},{"location":"replethora/block-scanner/#other-functionality","title":"Other functionality","text":"<p>The block scanner can also be held in your hand to reveal all ores within the scanner\u2019s radius. It doesn\u2019t serve much use, but looks kinda pretty.</p> <p>Hunting for blue shiny rocks with the block scanner</p>"},{"location":"replethora/block-scanner/#configuring","title":"Configuring","text":"<p>The block scanner can be configured using the scanner category of the plethora.cfg file:</p> <p><code>radius=8</code>: The maximum distance that a scaner can query. Note that the area is a cube, not a sphere.</p>"},{"location":"replethora/entity-sensor/","title":"Entity sensor","text":"<p>The entity sensor provides a way to query information about surrounding entities. There are so many ways this could go wrong\u2026</p> <p>Module: <code>plethora:sensor</code> (view methods)</p> <p>Usable in:  </p> <ul> <li> <p>Manipulator</p> </li> <li> <p>Minecart computer</p> </li> <li> <p>Neural interface</p> </li> <li> <p>Pocket computer</p> </li> <li> <p>Turtle</p> </li> </ul> <p></p>"},{"location":"replethora/entity-sensor/#basic-usage","title":"Basic usage","text":"<p>The entity sensor provides many nifty methods, but .sense() is definitely the one to get started with. After all, it\u2019s what the sensor does best! This finds all entities within 32 blocks of the sensor and reports some very basic information about them. <pre><code>local sensor = peripheral.wrap(--[[ whatever ]])\nfor _, entity in pairs(sensor.sense()) do\n  print((\"We found an entity (name: %s, uuid: %s)\"):format(entity.name, entity.id))\nend\nIf you want to find some more information about an entity (maybe you want to find out how hungry your friends are), you can use .getMetaByID and .getMetaByName. The first of these is a little more general, at the cost of being slightly more confusing. .getMetaByID takes an entity\u2019s UUID and returns lots of metadata about it. This ID can be found with the above .sense method, though beware - it\u2019s possible the entity may have wandered off and thus no longer be within range.\n\nlocal entities = sensor.sense()\nif #entities &gt; 0 then\n  local meta = sensor.getMetaByID(entities[1].id)\n  if meta then print(textutils.serialise(meta)) end\nend\n</code></pre> <code>.getMetaByName</code> does much the same, but only operates on players, taking a username instead.</p>"},{"location":"replethora/entity-sensor/#other-functionality","title":"Other functionality","text":"<p>Holding the entity sensor will display an orb on every nearby entity. This provides a nice way of hunting down those pesky zombies!</p>"},{"location":"replethora/entity-sensor/#configuring","title":"Configuring","text":"<p>The entity sensor can be configured using the sensor category of the plethora.cfg file:</p> <p><code>radius=16</code>: The maximum distance that a sensor can query. Note that the area is a cube, not a sphere.</p>"},{"location":"replethora/introspection-module/","title":"Introspection module","text":"<p>The introspection module allows accessing the inventory of a player, also providing the ability to get basic information about yourself.</p> <p>Module: <code>plethora:introspection</code> (view methods)</p> <p>Usable in:</p> <ul> <li> <p>Manipulator</p> </li> <li> <p>Neural interface</p> </li> <li> <p>Pocket computers</p> </li> <li> <p>Turtle</p> </li> </ul>"},{"location":"replethora/introspection-module/#basic-usage","title":"Basic usage","text":"<p>Once the introspection module is equipped and wrapped as a peripheral, you will be able to fetch the current entity/turtle\u2019s inventory. With that object you can use any standard inventory method.</p> <pre><code>local introspection = peripheral.wrap(--[[ whatever ]])\n\nlocal inv = introspection.getInventory()\nlocal item = inv.getItemMeta(1)\nif item then\n    print(item.displayName .. \" at slot #1\")\nend\n</code></pre> <p>When using the introspection module within a manipulator, you will need to bind it to a player. This can be done by shift + right-clicking it. The module will now function as normal, acting on the bound player\u2019s inventory instead.</p> <p>Note that the introspection module also works on simple mobs and turtles, though you they do not have as large an inventory as players.</p>"},{"location":"replethora/introspection-module/#transferring-between-inventories","title":"Transferring between inventories","text":"<p>The introspection module also provides access to the player\u2019s ender chest. While there are methods to access them (<code>.getEnder()</code>), you can also use the item transfer system to move things between them.</p> <pre><code>local inv = introspection.getInventory()\nlocal ender = introspection.getEnder()\n\ninv.pushItems(\"ender_chest\", 1) -- Move slot 1 into the ender chest\nfor slot, item in pairs(ender.list()) do\n    print(string.format(\"#%d: %s\", slot, item.name))\nend\n</code></pre>"},{"location":"replethora/introspection-module/#other-functionality","title":"Other functionality","text":"<p>Right-clicking with the introspection module will open the current player\u2019s ender chest.</p>"},{"location":"replethora/keyboard/","title":"Keyboard","text":"<p>The trouble with computers, is that it's very easy to spend all the time looking at a screen and not notice all the things going on around you: the grass, the trees, the creeper behind you. Monitors help in their own way, but there's only so much you can hope to achieve by punching a screen. Thankfully we have a solution: the keyboard. Simply bind it to any computer, and type away wherever you are. Enjoy the luxury of the big screen!</p> <p></p>"},{"location":"replethora/keyboard/#using-with-computers","title":"Using with computers","text":"<p>Getting started with a keyboard couldn\u2019t be easier: simply walk up to the computer you want to type at and shift + right-click it whilst holding the keyboard. You\u2019ll notice that the keyboard now reports where it is bound to:</p> <p></p> <p>One can now use the keyboard anywhere in the world to type at this computer: simply right click it and tap away! Once you have finished typing, press escape to resume normal play.</p>"},{"location":"replethora/keyboard/#using-with-the-neural-interface","title":"Using with the neural interface","text":"<p>While the neural interface is a fantastic piece of technology, it is rather frustrating having to dig out your neural connector every time you want to use it. Thankfully this is no longer the case: you only have to dig out a keyboard instead! As long as your keyboard is not bound to any computer, using it whilst wearing a neural interface will type on your headpiece instead.</p> <p>An alternative location for the keyboard is in a module slot of a neural interface. Doing so will mean key presses are continually relayed to the interface, even when not in in the keyboard\u2019s GUI. This allows you to add your own keybindings, triggering all sorts of actions.</p> <p>An additional ability gained by using the keyboard in conjunction with the overlay glasses. It gains the ability to capture mouse interactions, firing events when clicking, dragging or scrolling. Each event (glasses_click, glasses_up, glasses_scroll, and glasses_drag) give values similar to their mouse counterparts, though the mouse positions are relative to the glasses\u2019 coordinate system.</p>"},{"location":"replethora/kinetic-module/","title":"Kinetic augment","text":"<p>The kinetic augment is the latest breakthrough in biocybernetics. It grants a computer direct access to the nervous system of a player or mob.</p> <p>Module: <code>plethora:kinetic</code> (view methods)</p> <p>Usable in:  </p> <ul> <li> <p>Minecart computer</p> </li> <li> <p>Neural interface</p> </li> <li> <p>Pocket computer</p> </li> <li> <p>Turtle</p> </li> </ul>"},{"location":"replethora/kinetic-module/#basic-usage","title":"Basic usage","text":"<p>While the kinetic augment has a wide range of functions, the best place to start is the most fun: <code>.launch()</code>. This functions very similarly to a laser\u2019s .<code>fire()</code> method: taking a yaw and pitch (horizontal and vertical angle) and a power. When called, this will catapult the current entity in the supplied direction, the resulting velocity depending on the provided power.</p> <p><pre><code>local kinetic = peripheral.wrap(--[[ whatever ]])\n\n-- Continuously fire the player into the sky\nwhile true do\n    kinetic.launch(0, -90, 4)\n    sleep(0.5)\nend\n</code></pre> Combined with other modules, the kinetic augment can be used in great number of ways. One can fire yourself in the direction you\u2019re currently looking, slow your descent if you\u2019re falling to fast, etc\u2026 Take a look at some of the examples to get some ideas.</p>"},{"location":"replethora/kinetic-module/#with-turtles","title":"With turtles","text":"<p>Kinetic augments can also be used as a turtle upgrade. When equipped, it acts as both a tool and peripheral. <code>turtle.dig()</code> or <code>turtle.attack()</code> will use the currently selected item in the inventory to break blocks or attack.</p> <p>Beware, turtles do not use these tools with their normal finesse. Durability will be consumed, and blocks may take multiple swings to break.</p>"},{"location":"replethora/kinetic-module/#other-functionality","title":"Other functionality","text":"<p>If you\u2019re a low-tech kind of person, you can always experience the joys of <code>.launch()</code> by hand. First, hold carefully grip the kinetic augment with either hand. Then charge it up by holding right click, feeling the raw power accumulate in your muscles. Finally release, and enjoy the feel of the wind rushing in your hair and the rapidly approaching brick wall.</p>"},{"location":"replethora/kinetic-module/#configuring","title":"Configuring","text":"<p>The kinetic augment can be configured with the kinetic section of the plethora.cfg file.</p> <p><code>launchMax=4</code>: The maximum power that can be used to launch an entity.</p> <p><code>launchCost=4</code>: The cost per power level to launch an entity. By default a computer will gain 10 energy points each tick (read about the cost system for more information).</p> <p><code>launchYScale=0.5</code>: The amount the y velocity is scaled when launching an entity. The Y axis does not experience friction in the same way other axis do, and so small changes in veloctity have a marge larger effect.</p> <p><code>launchElytraScale=0.4</code>: The amount a player\u2019s velocity is scaled by if they are using an elytra. When flying a player experiences much less friction, meaning small velocity increases can send the player a long distance.</p> <p><code>launchFallReset=true</code>: Whether to scale the fall distance if a player launches themselves. Minecraft computes fall damage from how long a player has been in the air rather than what speed they are travelling at. Consequently you can be falling very slowly but still die. If a player launches themselves upwards Plethora will correct the fall distance to account for the change in velocity.</p> <p>Note that this may not function correctly with wolds with custom gravity, such as Galacticraft planets.</p> <p><code>launchFloatReset=true</code>: Whether to reset the \u201cfloating\u201d time after launching. This allows players to fly with the kinetic augment without being kicked.</p> <p>Note: This is not an exhaustive list of configuration options for the kinetic augment - this only includes ones which require further explaination. Please consult the config file for a full list.</p>"},{"location":"replethora/laser/","title":"Frickin' laser beam","text":"<p>The frickin' laser beam fires a bolt of superheated plasma, a softnose laser, or some other handwavey science. This powerful projectile can deal incredible damage to mobs and blocks alike.</p> <p>Module:   <code>plethora:laser</code> (view methods)</p> <p>Usable in:  </p> <ul> <li> <p>Manipulator</p> </li> <li> <p>Minecart computer</p> </li> <li> <p>Neural interface</p> </li> <li> <p>Pocket computer</p> </li> <li> <p>Turtle</p> </li> </ul> <p>Basic usage Like all good tools, the laser does one thing, and does it well: it fires lasers. The .fire() method takes three arguments: the first two specifying the direction and the last specifying the potency.</p> <p>The angle is provided through a yaw (angle on the horizontal axis) and pitch (angle on the verticle axis), each measured in degrees. The potency can be any number between 0.5 and 5, with higher values dealing more damage but taking longer to recharge (note these values are configurable).</p> <pre><code>local laser = peripheral.wrap(--[[ whatever ]])\n\nfor yaw = 0, 360, 10 do\n  laser.fire(yaw, 0, 2) -- Fire a laser on the horizontal with potency 2\nend\n</code></pre>"},{"location":"replethora/laser/#other-functionality","title":"Other functionality","text":"<p>If you are rather paranoid about the singularity, you may want to avoid giving computers access to these high energy weapons. Instead, you can elect to fire the laser by hand. It functions a little like a bow, charging it for longer will result in a more powerful (and more deadly) projectile.</p> <p>You can choose to not break blocks when firing a laser by supplying the 4th argument with a false: <pre><code>laser.fire(1,0,2,false)\n</code></pre></p>"},{"location":"replethora/laser/#configuring","title":"Configuring","text":"<p>The laser can be configured using the laser category of the plethora.cfg file:</p> <p><code>minimumPotency=0.5</code>: The minimum potency a laser can have. Raising this prevents computers spamming a large number of lasers in a short amount of time.</p> <p><code>maximumPotency=5</code>: The maximum potency a laser can have.</p> <p><code>cost=10</code>: The \u201cenergy\u201d cost per potency for a laser. By default a computer will gain 10 energy points each tick (read about the cost system for more information).</p> <p><code>damage=4</code>: The damage done to an entity for each potency. Players and most mobs have 20 health, meaning a fully charged laser can kill an unarmoured creature with one hit.</p>"},{"location":"replethora/neural-interface/","title":"The Neural Interface","text":"<p>The neural interface is a wearable computer with support for peripherals and modules alike. The key difference between this and the manipulator is that modules have direct access to the wearer. The use of this becomes apparent when you consider the kinetic augment, which provides methods to control the wearer.</p> <p>To get started, craft a neural interface and a neural connector. You can place the neural interface in your helmet slot or right click another entity to place it in theirs.</p> <p></p> <p>Warning</p> <p>Placing neural interfaces on entities is currently not implemented. The documentation is kept for historical reasons.</p> <p>Note</p> <p>You can\u2019t place a neural interface on child mobs: that is just cruel. You should also be warned that once placed on a mob, the neural interface cannot be removed. Their brains are not as resilient to tampering as human brains are.</p> <p>Note</p> <p>If a neural interface doesn\u2019t show up on a mob, it probably means it is a modded mob. Please file an issue with a link to the mod and the name of the mob.</p> <p>Now that you\u2019ve placed the neural interface, right click the mob you placed it on, or the air if you placed it on yourself. You should receive a GUI not dissimilar to a turtle\u2019s. On the right you have slots for the peripherals which are mounted on the neural interface. Clicking the disk drive will toggle between showing peripherals and modules.</p> <p>Like turtles, the only supported ComputerCraft peripherals are wireless modems. However, there is also support for other mod\u2019s peripherals, such as CCTweaks\u2019 wireless bridge.</p> <p>All modules which can be placed in a manipulator can also be placed in a neural interface. They will continue to function as before. There are some modules which require the neural interface, or function best with it. Modules can be found mounted on the \u201cback\u201d slot of a computer, bundled together in a manipulator-like peripheral. Wrapping this peripheral will provide you with the same methods as an equivalent manipulator.</p> <p></p> <p></p>"},{"location":"replethora/neural-interface/#the-introspection-module","title":"The introspection module","text":"<p>The introspection module provides access to the inventory of the wearing entity, as well as useful information such as the entity name and id.</p> <p>Note</p> <p>It is possible to use the introspection upgrade in a manipulator by shift+right-clicking it to \u201cbind\u201d it to yourself. This obviously doesn\u2019t work for mobs though.</p>"},{"location":"replethora/neural-interface/#the-kinetic-augment","title":"The kinetic augment","text":"<p>The kinetic augment allows controlling the owning entity. Whilst this does have limited support for players, most methods require a mob of some sort. The method you\u2019ll probably want to get started with is .disableAI() which, as the name suggests, prevents the mob from wandering around doing its own thing.</p> <p>Note</p> <p>Some mob\u2019s instincts are just too ingrained in their psyche, even the neural interface cannot stop them doing what they\u2019re gonna do.</p> <p>One useful method is the .walk(x, y, z) method, which directs a mob to path-find to a position, ready to carry out your nefarious commands. Of course, if you want to get there faster, you can always use .launch(yaw, pitch, power) which contorts your muscles, launching you into the air in a hulk-like fashion.</p> <p>Some mobs have their own specific methods, such as .shoot() on skeletons, .teleport() on endermen and .explode() on creepers. Do with that what you will. I hold no responsibility.</p> <p>Note</p> <p>Be warned, the neural interface is a fragile piece of equipment and cannot withstand the force of creeper\u2019s explosions.</p>"},{"location":"replethora/overlay-glasses/","title":"Overlay glasses","text":"<p>The overlay glasses provide a powerful way of displaying information to the user, be it as a heads-up display or an in-world augmented-reality system.</p> <p>Module:   <code>plethora:glasses</code> (view methods)</p> <p>Usable in:  </p> <ul> <li>Neural interface</li> </ul>"},{"location":"replethora/overlay-glasses/#usage","title":"Usage","text":"<p>You\u2019ll notice most other modules have a \u201cBasic Usage\u201d section. Oh boy, not here. The overlay glasses are one of the more complex parts of the mod and, when mastered, are incredibly powerful. You can create ore scanners, base monitoring programs, or even run a shell without having to open a GUI.</p> <p>Firstly, it\u2019s worth noting that the overlay glasses only work in the neural interface. The advanced holographic projector needs to be as close to your eyes as possible, so you might as well wire it into your brain while you\u2019re at it.</p> <p>Unlike ComputerCraft\u2019s term and paintutils API, the overlay glasses operate on the idea of \u201cvector graphics\u201d. Instead of saying \u201cset these pixels to red\u201d, you create shapes and set properties on them. We\u2019ll start off doing this by getting hold of the 2D canvas and drawing a square:</p> <p><pre><code>-- Get hold of the canvas\nlocal interface = peripheral.wrap(\"back\")\nlocal canvas = interface.canvas()\n-- And add a rectangle\nlocal rect = canvas.addRectangle(0, 0, 100, 100, 0xFF0000FF)\n</code></pre> </p> <p>There\u2019s a couple of things which stand out here:</p> <p>Our call to .addRectangle returns an object, which allows us to change properties at a later date. Why not call <code>.getDocs()</code> on it to find out more? We pass in 5 arguments, the first 4 are <code>x</code>, <code>y</code>, <code>width</code> and <code>height</code>. The last is an optional colour. The glasses doesn\u2019t use CC\u2019s colours API, but instead allows specifying RBGA colours. If you\u2019ve done any web design, you\u2019ll be familiar with RGB, where red is represented by <code>#FF0000</code>. This is much the same, but you add an extra FF on the end to specify transparency.</p> <p>If this gets a little too much, you can always use <code>.setColour</code>, which allows specifying individual red, green, blue (and alpha) channels.</p> <p>I wrote the mod, and I\u2019ll be the first to admit this isn\u2019t very impressive though. Let\u2019s flesh it out a bit:</p> <p><pre><code>rect.setSize(250, 30)\nrect.setAlpha(100) -- Let's make this see through\n\nlocal text = canvas.addText({ x = 5, y = 5 }, \"\")\ntext.setScale(3)\nwhile true do\n  text.setText(\"Time is \" .. textutils.formatTime(os.time()))\n  sleep(1)\nend\n</code></pre> </p> <p>Now we\u2019re cooking with gas! We\u2019ve now got a pretty ugly clock up and running in the top left of our screen. One interesting thing to note in the above is how we pass in the position to <code>.addText</code>. Many constructors take positions as tables instead - for these you can either pass <code>{ x = 5, y = 6 }</code> or just <code>{ 5, 6 }</code>. Any additional fields will be ignored, which is always nice.</p> <p>Of course, you\u2019re not limited to using text and rectangles. I\u2019d recommend checking out the method reference to see what other objects you can use.</p> <p>Putting things in boxes One feature of the glasses it is worth exploring is the ability to group items together. One effectively creates a whole new sub-canvas, where you can add items, and then move them around to your heart\u2019s content. Let\u2019s take our previous example, and spruce it up a bit:</p> <p><pre><code>local canvas = peripheral.wrap(\"back\").canvas()\ncanvas.clear() -- Get rid of our previous clock\n\nlocal group = canvas.addGroup({ 0, 0 })\n\n-- Look, we add items to our group instead\ngroup.addRectangle(0, 0, 240, 30, 0xFF000064)\n\nlocal text = group.addText({ 5, 5 }, \"\")\ntext.setScale(3)\n\nlocal x, y, dx, dy = 0, 0, 5, 5\n\n-- Compute the dimensions we can move within\nlocal width, height = canvas.getSize()\nwidth = width - 240\nheight = height - 30\n\nwhile true do\n  -- Bounce the group around the canvas\n  x = x + dx\n  if x &lt; 0 then x, dx = 0, -dx end\n  if x &gt; width then x, dx = width, -dx end\n\n  y = y + dy\n  if y &lt; 0 then y, dy = 0, -dy end\n  if y &gt; height then y, dy = height, -dy end\n\n  group.setPosition(x, y)\n\n  -- And update the time\n  text.setText(\"Time is \" .. textutils.formatTime(os.time()))\n\n  sleep(0.05)\nend\n</code></pre> </p> <p>While that was rather dense code, for which I apologise, I hope you can appreciate the end result! Not only can we move our clock around on screen without issue, we\u2019ve recreated a screensaver from the days of old.</p>"}]}